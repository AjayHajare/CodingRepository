Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Example 3:
Input: l1 = [], l2 = [0]
Output: [0]
 
Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.

**********************************************************************************************************************************************************************

//Naive Iterative Approach :---------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        if(l1==null && l2==null)            //if both list are empty, then return null
            return null;
        if(l1==null)                        //if list 'l1' is empty, then return l2
            return l2;
        if(l2==null)                        //if list 'l2' is empty, then return l1
            return l1;
        
        ListNode head = new ListNode();             //defined a node 'head', to point at head of list
        if(l1.val < l2.val){
            head.val = l1.val;
            l1 = l1.next;   
        }   
        else {
            head.val = l2.val;
            l2 = l2.next;
        }
        
        ListNode temp = head;                       //defined a node 'temp', to traverse the new list
        
        while(l1!=null && l2!=null){
            if(l1.val < l2.val){                        //condition when  'l1.val < l2.val'
                temp.next = new ListNode(l1.val);           //create new node & append it to 'next' of 'temp'
                temp = temp.next;                           //move 'temp' to next node
                l1 = l1.next;                               //move 'l1' t next node
            }   
            else if(l1.val > l2.val){                    //condition when  'l1.val > l2.val'
                temp.next = new ListNode(l2.val);
                temp = temp.next;
                l2 = l2.next;
            }
            else{                                        //condition when  'l1.val = l2.val'       
                temp.next = new ListNode(l1.val);
                temp = temp.next; 
                l1 = l1.next;
                temp.next = new ListNode(l2.val);
                temp = temp.next;
                l2 = l2.next;
            }
        }
        
        if(l1==null){                                //if all nodes of 'l1' are covered and some nodes of 'l2'
            while(l2!=null){                         //are remaining , then add remaing nodes in the list
                temp.next = new ListNode(l2.val);
                temp = temp.next;
                l2 = l2.next;
            }
        }
        
        if(l2==null){                                //if all nodes of 'l2' are covered and some nodes of 'l1'
            while(l1!=null){                         //are remaining , then add remaing nodes in the list
                temp.next = new ListNode(l1.val);
                temp = temp.next;
                l1 = l1.next;
            }
        }
        
        return head;
    }
}


Time complexity  :   let 'l1' of size 'm' and 'l2' of size 'n', then total number of times the loop runs is 'm+n', as both list are sorted.
                     Hence time complexity is O(m+n).
Space complexity  :   let 'l1' of size 'm' and 'l2' of size 'n'. We defined a new linked list of size 'm+n',to store the final result.
                     Hence Space complexity is O(m+n).  
                     
********************************************************************************************************************************************************************

//Better Iterative Approach  :---------------------------------------------------------------------------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);            //Create a node 'head' to point head of list with random value. Actual list starts at 'head.next'
        ListNode temp = head;
        
        while(l1!=null && l2!=null){
            if(l1.val <= l2.val){
                temp.next = l1;
                l1 = l1.next;
            }
            else{
                temp.next = l2;
                l2 = l2.next;
            }
            temp = temp.next;
        }
        
        if(l1 == null)             //Above loop terminate if(l1==null || l2==null || both null), so we append the rest of the longer linked list to the tail of our final list;
            temp.next = l2;
        if(l2 == null)
            temp.next = l1;
        
        return head.next;
    }
}



Time complexity  :   let 'l1' of size 'm' and 'l2' of size 'n', then total number of times the loop runs is 'm+n', as both list are sorted.
                     Hence time complexity is O(m+n).
Space complexity  :  We only defined a 'head' node and not any extra list, varible,etc.  So Space complexity is O(1)              


**************************************************************************************************************************************************************************
