Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Example 1:
IMAGE : https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1
 
Constraints:
The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100

***************************************************************************************************************************************************************************

//According to Aditya Verma's DP series - video no 48   :------------------------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int result = Integer.MIN_VALUE;                                 //It is declared global becuase we want its value to retain during each recursive call. 
                                                                    //Becuase it is the final ans that we want.
    public int diameterOfBinaryTree(TreeNode root) {
        height(root);                                              
        return result;
    }
    
    public int height(TreeNode root){
        if(root == null)                                           //Bace Condition
            return 0;
        
        int l = height(root.left);                                //Hypothesis
        int r = height(root.right);
        
        int tempAns = 1 + Math.max( l, r );                       //Induction    
        int ans = l+r;
        result = Math.max(ans, result);
        
        return tempAns;
    }
}    

/*
POINT TO NOTE -  here, 'Hypotheeis' is a part which is responssible to call the height fucntion and each and every node of the tree.

'tempAns' holds the value which Node will return to its parent. It is max height of tree with root as 'current node'. And '1' is added to include the height of 'current node'
'ans' holds the value of the diameter of tree with root is 'current node'
'result' holds the value of maximum out of (ans, result). As the 'result' is global, this updated value is used during next recursive call 
*/
 
