According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with 
its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
  1.Any live cell with fewer than two live neighbors dies as if caused by under-population.
  2.Any live cell with two or three live neighbors lives on to the next generation.
  3.Any live cell with more than three live neighbors dies, as if by over-population.
  4.Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. 
Given the current state of the m x n grid board, return the next state.

Example 1:
Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]

Example 2:
Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]
 
Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j] is 0 or 1.


************************************************************************************************************************************************************

Bruteforce Approach :----------------------------------------------------

class Solution {
    public void gameOfLife(int[][] board) {
        int rows = board.length;
        int columns = board[0].length;
        
        int result[][] = new int[rows][columns];                      //Use the extra array to store result,becuase the board needs to be updated simultaneously. 
                                                                      //We cannot update some cells first and then use their updated values to update other cells  
          
        for(int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                int countOne = 0;                                   // for each element, we need to count no of '1' only 
                
                if(j-1>=0){
                    if(board[i][j-1] == 1 )                         //horizontal left
                        countOne++;
                }
                if(j+1<columns){
                    if(board[i][j+1] == 1 )                         //horizontal right
                        countOne++;
                }
                
                if(i-1>=0){
                    if(board[i-1][j] == 1 )                         //Vertical above
                        countOne++;
                }
                if(i+1<rows){
                    if(board[i+1][j] == 1 )                         //Vertical below
                        countOne++;
                }
                    
                if(i-1>=0 && j-1>=0){
                    if(board[i-1][j-1] == 1 )                       //North-west direction
                        countOne++;
                }
                
                if(i+1<rows && j+1<columns){
                    if(board[i+1][j+1] == 1 )                       //South-east direction
                        countOne++;
                }
                
                if(i-1>=0 && j+1<columns){
                    if(board[i-1][j+1] == 1 )                      //North-east direction
                        countOne++;
                }
                
                if(i+1<rows && j-1>=0){
                    if(board[i+1][j-1] == 1 )                     //South-west direction
                        countOne++;
                }
                
                
                
                if( (board[i][j]==1) && (countOne<2 || countOne>3) ){                       //Condition for 1st and 3rd rule
                    result[i][j] = 0;
                }
                else if( (board[i][j]==1) && (countOne==2 || countOne==3) ){                //Condition for 2nd rule
                    result[i][j] = 1;
                }
                else if((board[i][j]==0) && (countOne==3)){                                 //Condition for 4th rule
                    result[i][j] = 1;
                }
                
            }
        }
        
        for(int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                board[i][j] = result[i][j];                                               //Copy the result into original array
            }
        }
    }
}




Better Approach with same time complexity :-----------------------------------------------


class Solution {
    public void gameOfLife(int[][] board) {
        int rows = board.length;
        int columns = board[0].length;
        
        int dir[][] = new int[][]{{0,-1},{0,1},{-1,0},{1,0},{-1,-1},{1,1},{1,-1},{-1,1}};
        
        int result[][] = new int[rows][columns];                          //Use the extra array to store result,becuase the board needs to be updated simultaneously. 
                                                                          //We cannot update some cells first and then use their updated values to update other cells  
          
        for(int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                int countOne = 0;                                       // for each element, we need to count no of '1' only 
                
                for(int k=0; k<8; k++){
                    int x = i+ dir[k][0];
                    int y = j+ dir[k][1];
                    
                    if(x<0 || x>=rows || y<0 || y>=columns)            //if any of the index is out of boundry of board then skip current iteration of loop
                        continue;
                    
                    if(board[x][y]==1)
                        countOne++;
                }        
                if( (board[i][j]==1) && (countOne<2 || countOne>3) ){                                   //Condition for 1st and 3rd rule
                    result[i][j] = 0;
                }
                else if( (board[i][j]==1) && (countOne==2 || countOne==3) ){                            //Condition for 2nd rule
                    result[i][j] = 1;
                }
                else if((board[i][j]==0) && (countOne==3)){                                             //Condition for 4th rule
                    result[i][j] = 1;
                }
                
            }
        }
        
        for(int i=0; i<rows; i++){
            for(int j=0; j<columns; j++){
                board[i][j] = result[i][j];                                                             //Copy the result into original array
            }
        }
    }
}


