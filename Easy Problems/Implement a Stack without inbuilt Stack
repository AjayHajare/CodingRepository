Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
Implement the MinStack class:
MinStack() initializes the stack object.
void push(val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
 

Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:
-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.

*****************************************************************************************************************************************************

Solution using 'ArrayList' which has time complexity as O(n) :------------------------------------------------

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

class MinStack {

    int top = -1;
    List<Integer> stack;
    
    public MinStack() {
         stack = new ArrayList<Integer>();
    }
    
    public void push(int val) {
        stack.add(val);
        top++;
    }
    
    public void pop() {
        stack.remove(top);
        top--;
    }
    
    public int top() {
        int x = stack.get(top);
        return x;
    }
    
    public int getMin() {
        int min = Integer.MAX_VALUE;                    // This 'min' need to be intialize inside the method, as everytime method is called, 'min' should calculated from scrach
        for(int x:stack){
            if(x<min)   
                min = x;
        }
        return min;
    }
}

********************************************************************************************************************************************************************


Optimal Solution using Linked list with time complexity as O(1) :------------------------------------------------------------

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
class Node{
    int value;
    int min;
    Node next;
    
    public Node(int value, int min, Node next){
        this.value = value;
        this.min = min;
        this.next = next;
    }
}

class MinStack {
    
    Node head;
    public MinStack(){
        
    }
    
    public void push(int val) {
        Node newNode;
        if(head == null)
            head = new Node(val, val, null);
        else {
            newNode = new Node(val, Math.min(head.min, val), head);       //Min value is a property associated with the existing values in stack, which means it changes 
                                                                          //as elements come and go. But in stack elements changes in LIFO order, so the min value keeps 
                                                                          //repeating in the elements above it but gets updated in the elements below it when it is removed. 
            head = newNode;
        }
    }
    
    public void pop() {
        if(head != null)                                                // condition check to avoid null pointer exception
            head = head.next;
    }
    
    public int top() {
        if(head != null)                                               // condition check to avoid null pointer exception
            return head.value;
        return -1;
    }
    
    public int getMin() {
        if(head != null)                                              // condition check to avoid null pointer exception
            return head.min;
        return -1;
    }

}

