Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center). 

Example 1:
IMAGE :   https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg
Input: root = [1,2,2,3,4,4,3]
Output: true

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

*********************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


// Recursive approach  :-------------------------------------------------------------------------

class Solution {  
    public boolean isSymmetric(TreeNode root) {
        if(root==null)
            return false;
        return isMirror(root.left, root.right);
    }
    
   public boolean isMirror(TreeNode l, TreeNode r){
       if(l==null && r==null)      return true;
       if(l==null || r==null)      return false;
       
       return (l.val == r.val) && isMirror(l.left, r.right) && isMirror(l.right, r.left);
   }
}

************************************************************************************************************************************************************

// Iterative Approach using DFS algorithm :--------------------------------------------
class Solution{
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        if(root == null)    return false;
        
        q.add(root.left);                                               // q.add() - to insert element in queue
        q.add(root.right);
        
        while(q.size()>1){                                            //When first time the method is called with empty queue, then the root of the tree is added in the queue. 
                                                                      // We need to keep that 'root of tree' out of comparisons, hence the loop runs while(q.size() > 1).
                                                                      
            TreeNode l = q.poll(), r = q.poll();                      // q.poll() - to remove element from queue
            
            if(l==null & r==null)    
                continue;
            if(l==null || r==null || l.val != r.val)    
                return false;
            
            q.add(l.left);
            q.add(r.right);
            q.add(l.right);
            q.add(r.left);
        }
        return true;
    }
}









