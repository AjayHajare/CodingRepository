Given the root of a binary tree, invert the tree, and return its root.

Example 1:
IMAGE  :  https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
IMAGE :    https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
Input: root = []
Output: []
 
Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

**************************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Recursive Solution :-------------------------------------------------

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null)
            return root;
        
        TreeNode t = root.left;                                                 //Swap the left 'Node' and right 'Node' for every root
        root.left = root.right;
        root.right = t;
        
        invertTree(root.left);                                                //call the function for root left child
        invertTree(root.right);                                               //call the function for root right child
        
        return root;
    }
}

Since each node in the tree is visited only once, the time complexity is O(n), where n is the number of nodes in the tree. We cannot do better than that, 
since at the very least we have to visit each node to invert it.

Because of recursion, O(h) function calls will be placed on the stack in the worst case, where h is the height of the tree. Because h âˆˆ O(n), the space complexity is O(n).

The recursive solution is correct, but it is also bound to the application stack, which means that it's no so much scalable - (you can find the problem size that will 
overflow the stack and crash your application), so more robust solution would be to use stack data structure.

***************************************************************************************************************************************************************************

class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root==null)
            return null;
        
        Stack<TreeNode> stk = new Stack<TreeNode>();
        stk.push(root);
        
        while(!stk.isEmpty()){
            TreeNode t = stk.pop();                         //'Node' at top of stack is poped out
            if(t==null)                                 
                continue;
            
            TreeNode temp = t.left;                         //Swap the left child 'Node' with right child 'Node'
            t.left = t.right;
            t.right = temp;
            
            stk.push(t.left);                              //push left child in stack
            stk.push(t.right);                             //push right chile in stack
        }
        
        return root;
    }
}


Since each node in the tree is visited only once, the time complexity is O(n), where n is the number of nodes in the tree.
Space complexity is O(n), since in the worst case, the queue will contain all nodes in one level of the binary tree. For a full binary tree, the leaf level has 
ceil [n/2] = O(n) leaves.

