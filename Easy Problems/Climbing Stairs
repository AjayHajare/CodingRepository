You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 
Constraints:
1 <= n <= 45

*********************************************************************************************************************************************************************

//Solution using Maths 

import java.math.BigInteger;

class Solution {
    public int climbStairs(int n) {
        if(n<=0)    return 0;
        if(n==1)    return 1;
        
        int ones, twos=0, sum;
             
        if(n%2==1)   sum = 1;
        else         sum = 2;
        
        for(int i=n-2; i>0; i-=2){
            ones = i;
            twos++;
            BigInteger count = fact(ones+twos).divide(fact(ones).multiply(fact(twos)));
            sum = sum + count.intValue();                                                       // 'intValue()' is used to convert 'BigInteger'  into 'int'
        }    
        
        return sum;
    }
    
    
    public BigInteger fact(int n){                        //Function defined to calculate 'Factorial(n)', by using iterative approach
        BigInteger x = BigInteger.ONE;                    //Using 'int' we can calculate factorial upto 12, using 'long' can calculate upto 21, Hence used 'BigInteger',
        for(int i=2; i<=n; i++){
            x = x.multiply(BigInteger.valueOf(i));
        }
        return x;
    }
}

**************************************************************************************************************************************************************************

// Optimal Solution -  It is an application of fibonacci Series :----------------------------------------------------------

class Solution{
    public int climbStairs(int n){
        if(n==0)    
            return 0;
        
        int ans[] = new int[46];                           //According to constaints 1 <= n <= 45, hence taken array of size '46', where zeroth ele is just for calcution purpose
        
        ans[0]=1;
        ans[1]=1;
        
        for(int i=2; i<=n; i++){
            ans[i] = ans[i-1] + ans[i-2];
        }
        
        return ans[n];
    }
}
