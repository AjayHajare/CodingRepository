Given an array A[] of size N and a positive integer K, find the first negative integer for each and every window(contiguous subarray) of size K.

Example 1:
Input : 
N = 5
A[] = {-8, 2, 3, -6, 10}
K = 2
Output : 
-8 0 -6 -6
Explanation :
First negative integer for each window of size k
{-8, 2} = -8
{2, 3} = 0 (does not contain a negative integer)
{3, -6} = -6
{-6, 10} = -6

 
Example 2:
Input : 
N = 8
A[] = {12, -1, -7, 8, -15, 30, 16, 28}
K = 3
Output :
-1 -1 -7 -15 -15 0 

 
Your Task:  
You don't need to read input or print anything. Your task is to complete the function printFirstNegativeInteger() which takes the array A[], its size N and an 
integer K as inputs and returns the first negative number in every window of size K starting from the first till the end. If a window does not contain a negative 
integer , then return 0 for that window.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(K)

Constraints:
1 <= N <= 105
1 <= A[i] <= 105
1 <= K <= N

********************************************************************************************************************************************************************

//Sliding Window approach :--------------------------

class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        long res[] = new long[A.length-K+1];
        ArrayList<Long> temp = new ArrayList<Long>();                     //It is a List to store negative numbers from entiren current window of size K, if there is  
                                                                          //no negative number, then this List will be empty.
        int i=0, j=0;
        
        while(j<N){
            if(A[j] < 0)
                temp.add(A[j]);                                           //CALCULATION
            
            if(j-i+1 < K){                                                //COMMON PART FOR EACH FIXED SIZE SLIDING WINDOW
                j++;
            }
            
            else if(j-i+1 == K){
                if(temp.isEmpty())                                     //As explain above, when List is empty then there is no negative number in entire curren window
                    res[i] = 0;
                else{
                    res[i] = temp.get(0);                             //When list is not empty, then first element from list is first negative number of the window
                    
                    if(A[i] == temp.get(0))                           //Before sliding the window(Increamenting the 'i'), check whether ith element is present in List
                        temp.remove(0);                               //If it is present, then remove it from List, before sliding the window. So that first element
                                                                      //of List represent the negative number from next window.
                }
                j++;                                                     //SLIDE THE WINDOW
                i++;
            }
            
        }
        
        return res;
    }
}

Time Complexity : O(n)
Space Complexity : O(K),  as we keep removing element as we slide the window.So, in worst case number of element in the List can be atmost 'K'
