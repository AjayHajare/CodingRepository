Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
    1 <= nums.length <= 3 * 104^
    -10^5 <= nums[i] <= 10^5

**********************************************************************************************************************************************************************


/*
The max-sum of subarrays ended at nums[i] is either:
    1) nums[i] + (the max-sum of subarrays ended at nums[i-1])   
        OR
    2) nums[i], if the max-sum of subarrays ended at nums[i-1] is negative.
In the code below, we use currSum to keep track of max-sum ended at nums[i-1] and make our decision.

*/

class Solution {
    public int maxSubArray(int[] nums) {
        int currentSum = 0, maxSum = Integer.MIN_VALUE;
        
        for(int i=0; i<nums.length; i++){
            currentSum = Math.max(currentSum+nums[i], nums[i]);
            
            maxSum = Math.max(currentSum, maxSum);
        }
        
        return maxSum;
    }
}


TC : O(n)
SC : O(1)
