Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:
n == nums.length
1 <= n <= 5 * 104
-2^31 <= nums[i] <= 2^31 - 1

*************************************************************************************************************************************************************************

// Approaching by sorting input array :-----------------------------------------------------------------

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);                                //'Sort()' in java uses Quicksort algorithm. complexity is O(nlogn).
        return nums[nums.length/2];                       //Return 'n/2' th element from sorted list
    }
}

***************************************************************************************************************************************************************************

//Optimal Approach without manipulating input array and linear time complexity :------------------------------------ 

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0 , ele = 0;
        
        for(int x: nums){
            if(count==0)
                ele = x;
            else if(ele == x)
                count++;
            else
                count--;
        }
        
        return ele;
    }    
}
