Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:
n == nums.length
1 <= n <= 5 * 104
-2^31 <= nums[i] <= 2^31 - 1

*************************************************************************************************************************************************************************

// Approaching by sorting input array :-----------------------------------------------------------------

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);                                //'Sort()' in java uses Quicksort algorithm. complexity is O(nlogn).
        return nums[nums.length/2];                       //Return 'n/2' th element from sorted list
    }
}

***************************************************************************************************************************************************************************

//Optimal Approach without manipulating input array and linear time complexity :------------------------------------ 

/*
Boyer-Moore Algorithm ( https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html ):

we need 2 values:
A candidate value, initially set to any value.
A count, initially set to 0.
For each element in our input list, we first examine the count value. If the count is equal to 0, we set the candidate to the value at the current element. Next, first compare the element's value to the current candidate value. If they are the same, we increment count by 1. If they are different, we decrement count by 1.
*/

class Solution {
    public int majorityElement(int[] nums) {
        int major = 0, count=0;
        for(int i=0; i<nums.length; i++){
            if(count==0){
                major = nums[i];
            }
            if(major == nums[i]){
                count++;
            }
            else {
                count--;
            }
        }
        
        return major;
    }
}


