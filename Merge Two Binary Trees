You are given two binary trees root1 and root2. Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. 
You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. 
Otherwise, the NOT null node will be used as the node of the new tree.
Return the merged tree.

Note: The merging process must start from the root nodes of both trees.

Example 1:
IMAGE  :   https://assets.leetcode.com/uploads/2021/02/05/merge.jpg
Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]

Example 2:
Input: root1 = [1], root2 = [1,2]
Output: [2,2]
 

Constraints:
The number of nodes in both trees is in the range [0, 2000].
-104 <= Node.val <= 104

********************************************************************************************************************************************************************************


//In this apporach, I used first tree to hold the result. 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1==null && root2==null)                            //if both roots point to null, then return null
            return null;
            
        if(root1==null)     return root2;                       //if root of first tree point to null, then return root of second tree
        if(root2==null)     return root1;                       //if root of second tree point to null, then return root of first tree
        
        root1.val = root1.val + root2.val;                      //while merging if corresponding nodes of tree are have some 'val', then save their sum in root1.
        
        root1.left = mergeTrees(root1.left, root2.left);         //Call mergeTrees() on corresponding child of both root. Here return value is 'TreeNode', so everytime the 
                                                                 //function is called , the new node gets added to the root as a child.
        root1.right = mergeTrees(root1.right, root2.right);       
        
        return root1;
    }
}
