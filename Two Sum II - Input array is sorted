Given an array of integers numbers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
Return the indices of the two numbers (1-indexed) as an integer array answer of size 2, where 1 <= answer[0] < answer[1] <= numbers.length.
You may assume that each input would have exactly one solution and you may not use the same element twice.

Example 1:
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

Example 2:
Input: numbers = [2,3,4], target = 6
Output: [1,3]

Example 3:
Input: numbers = [-1,0], target = -1
Output: [1,2]

Constraints:
2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in increasing order.
-1000 <= target <= 1000
Only one valid answer exists.

********************************************************************************************************************************************************************

Hashmap Apporach same as 'Two Sum' question:----------------------------------------------

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int res[] = new int[2];
        
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for(int i=0; i<numbers.length; i++){
            if(map.containsKey(target - numbers[i])){
                res[0] = i+1;
                res[1] = (map.get(target - numbers[i])) + 1;
                //break;
            }
            else{
                map.put(numbers[i], i);
            }
        }
        
        if(res[0]>res[1]){                                            //Here the 'result' array is required in sorted order. Hencw modified it.
            res[0] = res[0] + res[1];
            res[1] = res[0] - res[1];
            res[0] = res[0] - res[1];
        }
        
        return res;
    }
}

*************************************************************************************************************************************************************

Optimal Appproach(This approach works because given array is sorted) :--------------------------------------------------------

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int res[] = new int[2];
        int l=0, r=numbers.length-1;
        
        while(l<r){
            if((numbers[l]+numbers[r]) < target)                     //When the sum is smaller than the target, we move 'l' to the right by 1. we can't make 'r' smaller 
                                                                     //because that's gonna make the sum even smaller.
                l++;
            else if((numbers[l]+numbers[r]) > target)                //When the sum is bigger than target,move r to the left by 1. we can't make l bigger because that's 
                                                                     //gonna make the sum even bigger.
                r--;
            else  {                                                  //When the sum is equal to the target, we found the answerProblem link.
                res[0]=l+1;
                res[1]=r+1;
                break;
            }
        }       
        return res;
    }
}

