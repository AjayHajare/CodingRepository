Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
    1 <= nums.length <= 3 * 104^
    -10^5 <= nums[i] <= 10^5

**********************************************************************************************************************************************************************


class Solution {
    public int maxSubArray(int[] nums) {
        int sum=0, mx=Integer.MIN_VALUE;
        
        for(int j=0; j<nums.length; j++){
            if(sum+nums[j] > nums[j]){                 
                sum = sum+nums[j];                                      
            }
            else{
                sum = nums[j];
            }
            mx = Math.max(sum, mx);
        }
        
        return mx;
    }
}

********************************************************************************************************************************************************************
