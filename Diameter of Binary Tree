Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Example 1:
IMAGE : https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1
 
Constraints:
The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100

***************************************************************************************************************************************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = Integer.MIN_VALUE;
    
    public int diameterOfBinaryTree(TreeNode root) {
        maxDepth(root);
        return max;                     //Find out the child which is at max distance from the leaf node
    }
    
    public int maxDepth(TreeNode root){
        if(root==null) 
            return 0;
        
        int l = maxDepth(root.left);            // 'left' child return its maxDepth from leaf
        int r = maxDepth(root.right);           // 'right' child return its maxDepth from leaf
        
        max = Math.max( (l + r), max );         
        
        return (1 + Math.max(l , r));           
        
        /*
        return max in diameterOfBinaryTree because it is the length of both subtrees (the case of running through a root node).
        Returning 'Math.max(left, right) + 1' from maxDepth just guarantees that the recursive nature will give us the largest path in that subtree.
        */
    }
}
