BUBBLE SORT ------

public class Main
{
	public static void main(String[] args) {
	    int arr[] = new int[]{3,5,8,4,1,8,9};
        int n = arr.length;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n-i-1; j++){
                if(arr[j] > arr[j+1]){
                    swap(arr, i, j);
                }
            }
        }
        
        for(int i=0; i<n; i++)
		    System.out.print(arr[i]+" ");
	}
	
	public static void swap(int arr[], int i, int j){
	    int temp = arr[i];
	    arr[i] = arr[j];
	    arr[j] = temp;
	}
}


Time Complexity : O(n^2)
Space complexity : O(1)

*****************************************************************************************************************************************************************

MERGE SORT ---------

public class Main  
{  
    void merge(int arr[], int beg, int mid, int end)  {
        int l = mid - beg + 1;  
        int r = end - mid;  
          
        int LeftArray[] = new int [l];  
        int RightArray[] = new int [r];  
          
        for (int i=0; i<l; ++i)  
            LeftArray[i] = arr[beg + i];  
          
        for (int j=0; j<r; ++j)  
            RightArray[j] = arr[mid + 1+ j];  
          
          
        int i = 0, j = 0;  
        int k = beg;  
        while (i<l&&j<r)  
        {  
            if (LeftArray[i] <= RightArray[j])  
            {  
                arr[k] = LeftArray[i];  
                i++;  
            }  
            else  
            {  
                arr[k] = RightArray[j];  
                j++;  
            }  
            k++;  
        }  
        while (i<l)  
        {  
            arr[k] = LeftArray[i];  
            i++;  
            k++;  
        }  
          
        while (j<r)  
        {  
            arr[k] = RightArray[j];  
            j++;  
            k++;  
        }  
    }  
  
    void sort(int arr[], int beg, int end)  
    {  
        if (beg<end)  
        {  
            int mid = (beg+end)/2;  
            sort(arr, beg, mid);  
            sort(arr , mid+1, end);  
            merge(arr, beg, mid, end);  
        }  
    }  
    public static void main(String args[])  
    {  
        int arr[] = {90,23,101,45,65,23,67,89,34,23};  
        Main ob = new Main();  
        ob.sort(arr, 0, arr.length-1);  
        
        System.out.println("\nSorted array");  
        for(int i =0; i<arr.length;i++)  
        {  
            System.out.print(arr[i]+" ");  
        }  
    }  
}  


Time Complexity : O(nlogn)
Space complexity : O(n)

*****************************************************************************************************************************************************************
QUICK SORT :

import java.util.*;
public class QuickSort{
	public static void main(String[] args) {  
        int arr[] = new int[]{23, 3, 0, 900,-1,-8,-3, 34, -65};  
        quickSort(arr, 0, arr.length-1);  
        
        System.out.println("\n The sorted array is: \n");  
        for(int i=0;i<arr.length;i++)  
            System.out.print(arr[i]+" ");  

        System.out.println();
    }
    
    public static void quickSort(int arr[], int beg, int end){
        if(beg < end){
            int loc = partition(arr, beg, end);
            quickSort(arr, beg, loc-1);
            quickSort(arr, loc+1, end);
        }
    }
    
    public static int partition(int arr[], int beg, int end){
        int pivot = arr[beg];
        int i = beg, j = end;
        
        while(i<j){
            while(arr[i]<=pivot && i<end)
                i++;
            while(arr[j]>pivot && j>=beg)
                j--;
                
            if(i<j)
                swap(arr, i, j);
        }
        
        swap(arr, beg, j);
        
        return j;
    }
    
    public static void swap(int arr[], int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

Time Complexity : O(n^2),  but average complexity is O(nlogn)
Space complexity : O(1)
