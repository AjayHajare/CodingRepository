You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 
Constraints:
1 <= prices.length <= 105
0 <= prices[i] <= 104

**************************************************************************************************************************************************************************

/*
Profit is the difference between selling at day j, and buying at day i (with j > i). The range [i, j] should be chosen so that the sub-profit is maximum:
Profit = prices[j] - prices[i]
We should choose j that prices[j] is as big as possible, and choose i that prices[i] is as small as possible (of course in their local range).

Let's say, we have a range [3, 2, 5], we will choose (2,5) instead of (3,5), because 2<3.
Now, if we add 8 into this range: [3, 2, 5, 8], we will choose (2, 8) instead of (2,5) because 8>5.

From this observation, from day X, the buying day will be the last continuous day that the price is smallest. Then, the selling day will be the last continuous day 
that the price is biggest.
*/

class Solution {
    public int maxProfit(int[] prices) {
        int min=Integer.MAX_VALUE, profit = 0;
        
        for(int i=0; i<prices.length; i++){
            if(prices[i] < min)
                min = prices[i];
            else
                profit = Math.max(profit, prices[i]-min);
        }
        
        return profit;
    }
}
