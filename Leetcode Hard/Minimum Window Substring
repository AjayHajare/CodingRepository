Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included 
in the window. If there is no such substring, return the empty string "". The testcases will be generated such that the answer is unique.
A substring is a contiguous sequence of characters within the string.

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.


Constraints:
    m == s.length
    n == t.length
    1 <= m, n <= 105
    s and t consist of uppercase and lowercase English letters.

 
Follow up: Could you find an algorithm that runs in O(m + n) time?

*********************************************************************************************************************************************************************

//It is a sliding window approach :------------------------

class Solution {
    public String minWindow(String s, String t) {
        int mn = Integer.MAX_VALUE;
        String res = "";                                                  //Defined a string 'res' to store result and initialized it as empty string
        
        int i=0, j=0, tlen = t.length(), slen = s.length();
        
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        
        for(int k=0; k<tlen; ++k){                                       
            map.put(t.charAt(k), map.getOrDefault(t.charAt(k),0)+1);
        }
        int count = map.size();                                         //'count' is defined to number of characters whose need to be satified.
        
        while(j < slen){
            if(map.containsKey(s.charAt(j))){                           //if current char of 's' is present in 't', then only we will process it, otherwise will be ignore it.
                map.put(s.charAt(j), map.get(s.charAt(j))-1);
                if(map.get(s.charAt(j))==0){
                    --count;
                }
            }
            
            if(count==0){                                              //This is the condition, when we get potential candidate for our answer
                while( count == 0 ){
                    if( (j-i+1) < mn ){
                        mn = (j-i+1);                                   //if current window size is less then 'mn', update 'mn'
                        res = s.substring(i, j+1);                      //and store the substring from window in res.
                    }
                
                    if(map.containsKey(s.charAt(i))){                       //Before sliding winodw, check if char at 'i' is present in 't', then increase its keyvalue in map. Otherwize ignore it.
                        map.put(s.charAt(i), map.get(s.charAt(i))+1);
                        if(map.get(s.charAt(i))>0)
                            ++count;
                    }
                    ++i;
                }
            }
            
            ++j;
        }
        
        return res;
    }
}


Time Complexity : O(m+n)
Space complexity : O(n) ...space used for map

