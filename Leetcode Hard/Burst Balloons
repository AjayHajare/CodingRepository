You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there 
is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:

Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:

Input: nums = [1,5]
Output: 10

 

Constraints:

    n == nums.length
    1 <= n <= 500
    0 <= nums[i] <= 100


**********************************************************************************************************************************************************************

// This approach is based on "Matrix Chain Multipilcation" and the memoization method is used as recursive was giving TLE error.


class Solution {
    int t[][];                                                 //table is declared here
    public int maxCoins(int[] nums) {
        int n = nums.length;
        if (n == 1) return nums[0];

        int[] a = new int[n + 2];                   
        a[0] = 1;
        int p = 1;
        for (int i = 0; i < n; i++) {                           //This loop is for removing all zeros from array, as they will not add any value in final ans.
            if (nums[i] != 0) a[p++] = nums[i];
        }
        a[p] = 1;
        
        t = new int[p+1][p+1];                                //The table is defined here
        return solve(a, 0, p);
    }
    
   
    public int solve(int nums[], int i, int j){
        if(i>=j-1){
            return 0;
        }
        
        if(t[i][j] != 0)
            return t[i][j];
        
        int max = 0;
        
        for(int k=i+1; k<j; k++){                                                                // First of all, dp[i][j] in here means, the maximum coins we get 
                                                                                                 //after we burst all the balloons between i and j in original array
                                                                                                 // That is why the loop for 'k' is from 'i+1'  to 'j'
            int tempAns = solve(nums, i, k) + nums[i]*nums[k]*nums[j] + solve(nums, k, j);
            max = Math.max(tempAns, max);
        }
        
        return t[i][j] = max;
    }
    
}

