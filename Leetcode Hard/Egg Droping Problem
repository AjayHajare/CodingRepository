You are given e identical eggs and you have access to a building with n floors labeled from 1 to n. You know that there exists a floor f where 0 <= f <= n such that 
any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.Each move, you may take an unbroken egg and drop it from 
any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves. Return the minimum 
number of moves that you need to determine with certainty what the value of f is.

Example 1:
Input: e = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.
Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.
If it does not break, then we know f = 2.
Hence, we need at minimum 2 moves to determine with certainty what the value of f is.

Example 2:
Input: e = 2, n = 6
Output: 3

Example 3:
Input: e = 3, n = 14
Output: 4

Constraints:
    1 <= e <= 100
    1 <= n <= 104

*********************************************************************************************************************************************************************

We have to find minimum attempts to find the threshold floor in worst case
Threshold floor (tf) -> floor from egg will not break and for (tf+1) -> egg will break

        Here worst case means we have to take both the conditions at every floor that
        egg is broken and egg is not broken and try to achieve highest threshold floor, 

        Since we are talking about worst case so we will take maximum of both this case (as high floor as much possible)
        And from these maximum return minimum (minimize number of attempts to find highest threshold floor)

Please Note that We have eggs always greater then 0

Base Cases:
i) If number of floor is 0 then we will attempt 0 times
ii) If number of floor is 1 then we will attempt 1 times
iii) If we have only 1 egg then we will try from floor 1 to floor n , So , here we done n attempts. Due to worst case we will try every floor and drop the egg.


Here we have e eggs and n floor
        if we drop from k  (k=1 to n):
         i) egg break , now we remain e-1 eggs and k-1 floor beacase after i floor all the eggs will break
        ii) egg not break , now we remain e eggs and n-k floor because before k (included) all eggs will be remain
        

**********************************************************************************************************************************************************************

// Recursive solution which gives tle  :----------------

class Solution {
    public int superEggDrop(int e, int n) {
        if(e==1)
            return n;
        if(n==0 || n==1)
            return n;
        
        int mn = Integer.MAX_VALUE;
        
        for(int k=1; k<=n; k++){
            int tempAns =  1 + Math.max( superEggDrop(e-1, k-1), superEggDrop(e, n-k) );
            mn = Math.min( mn, tempAns);
        }
        
        return mn;
    }
}

Time complexity :  O( n * 2^ min(n,e) ),    because the loop runs 'n' times and in each iteration there is two different function calls.
Space Complexity :  O(n),                   Auxiliary space used by stack for recursive calls

**********************************************************************************************************************************************************************

//  Memoization solution which also gives tle :------------------------

class Solution {
    static int t[][];
    
    public int superEggDrop(int e, int n) {
        t = new int[e+1][n+1];
        
        for(int i=0; i<=e; i++){
            for(int j=0; j<=n; j++){
                t[i][j] = -1;
            }
        }
        
        return solve(e, n);
    }
    
    public int solve(int e, int n){
        if(e==1)
            return n;
        if(n==0 || n==1)
            return n;
        
        if(t[e][n] != -1)
            return t[e][n];
        
        int mn = Integer.MAX_VALUE;
        
        for(int k=1; k<=n; k++){
            int tempAns =  1 + Math.max( solve(e-1, k-1), solve(e, n-k) );
            mn = Math.min( mn, tempAns);
        }
        
        return t[e][n] = mn;
    }
}


Time Complexity: O((n^2) * k)
Space Complexity: O(k * n)


*********************************************************************************************************************************************************************

//  Memoization solution with 'binary search' used instaed of 'linear search'  :-----------

class Solution {
    static int t[][];
    
    public int superEggDrop(int e, int n) {
        t = new int[e+1][n+1];
        
        for(int i=0; i<=e; i++){
            for(int j=0; j<=n; j++){
                t[i][j] = -1;
            }
        }
        
        return solve(e, n);
    }
    
    public int solve(int e, int n){
        if(e==1)
            return n;
        if(n==0 || n==1)
            return n;
        
        if(t[e][n] != -1)
            return t[e][n];
        
        int mn = Integer.MAX_VALUE;
        int l=0, r=n, temp = n;
        
        while(l<=r){
            int mid = (l+r) / 2;
            int left =  solve(e-1, mid-1);
            int right = solve(e, n-mid);
            temp = 1 + Math.max(left, right);
            
            if(left < right)
                l = mid+1;
            else
                r = mid-1;
            
            mn = Math.min( mn, temp);
        }
        
        return t[e][n] = mn;
    }
}

Time Complexity: O((n^2) * log n)
Space Complexity: O(k * n)
