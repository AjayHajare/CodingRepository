Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.
(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in 
the string S.)

Example 1:
Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.

Note:
    1 <= str1.length, str2.length <= 1000
    str1 and str2 consist of lowercase English letters.

************************************************************************************************************************************************************************

// Solution using Top Down DP, based Longest Common Subsequence 

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
                
        
        // find LCS.
        int t[][] = new int[m+1][n+1];
        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if(str1.charAt(i-1) == str2.charAt(j-1))
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = Math.max( t[i-1][j] , t[i][j-1]);
            }
        }
        
        // build result
        StringBuilder result = new StringBuilder();
        int i = m;
        int j = n;                                      // i and j represent the length of str1 and str2 resp.
        while(i>0 && j>0){                              // if any of length becomes 0, then this loop ends
            if(str1.charAt(i-1) == str2.charAt(j-1)){
                result.append(str1.charAt(i-1));
                i--;
                j--;
            }
            else if( t[i-1][j] > t[i][j-1] ){
                result.append(str1.charAt(i-1));
                i--;
            }
            else{
                result.append(str2.charAt(j-1));
                j--;
            }
        }
        
        //For supersequence when any of string length becomes 0, we need to add all remaining chars of other string in supersequence. 
        while(i>0){                                 //if(j=0), then this loop will be executed
            result.append(str1.charAt(i-1));
            i--;
        }
        while(j>0){                                 //if(j=0), then this loop will be executed
            result.append(str2.charAt(j-1));
            j--;
        }
        
        return result.reverse().toString();         //As we are adding string from backword direction, we need to                                                     //reverse it, before returning.
    }
    
}
