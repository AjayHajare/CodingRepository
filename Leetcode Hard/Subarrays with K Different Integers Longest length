Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.

Example 1:

Input:
S = "aabacbebebe", K = 3
Output: 7
Explanation: "cbebebe" is the longest 
substring with K distinct characters.

â€‹Example 2:

Input: 
S = "aaaa", K = 2
Output: -1
Explanation: There's no substring with K
distinct characters.


Your Task:
You don't need to read input or print anything. Your task is to complete the function longestKSubstr() which takes the string S and an integer K as input and 
returns the length of the longest substring with exactly K distinct characters. If there is no substring with exactly K distinct characters then return -1.


Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(1).


Constraints:
1<=|S|<=10^5
1<=K<=10^5

************************************************************************************************************************************************************************


class Solution {
    public int longestkSubstr(String s, int k) {
        int mx = -1;
        
        int i=0, j=0;
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        
        while(j < s.length()){
            char c = s.charAt(j);
            map.put(c, map.getOrDefault(c, 0)+1);
            
            if(map.size() < k){
                j++;
            }
            
            else if(map.size() == k){
                mx = Math.max( mx, j-i+1);
                j++;
            }
            
            else if(map.size() > k){
                while(map.size() > k){
                    map.put( s.charAt(i), map.get(s.charAt(i))-1 );
                    if(map.get(s.charAt(i))==0)
                        map.remove(s.charAt(i));
                    i++;
                }
                j++;
            }
        }
        
        return mx;
    }
}

Time Complexity : O(n)
Space complexity : O(n)
