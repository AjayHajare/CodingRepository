Given a string s. In one step you can insert any character at any index of the string.
Return the minimum number of steps to make s palindrome. A Palindrome String is one that reads the same backward as well as forward.

Example 1:
Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we don't need any insertions.

Example 2:
Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".

Example 3:
Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".

Example 4:
Input: s = "g"
Output: 0

Example 5:
Input: s = "no"
Output: 1

Constraints:
    1 <= s.length <= 500
    All characters of s are lower case English letters.

***********************************************************************************************************************************************************************

//This solution is based on Longest common subsequence(LCS). First, we reverse the given string. Then applied LCS() method on given string and reverse of given string
//Then the output of LCS() gives numbers terms which are equal in both inputs. So, the final answer is  "s.length() - LCS()".
//This method passing of string & its reverse to LCS, is used in Longest Palindromic Subsequence.

class Solution {
    public int minInsertions(String s) {
        int result = 0;
        
        String rev = reverse(s);
        result = s.length() - LCS(s, rev, s.length(), rev.length() );
        return result;
    }
    
    public static int LCS(String a, String b, int m, int n){
        int t[][] = new int[m+1][n+1];
        
        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if( a.charAt(i-1) == b.charAt(j-1) )
                    t[i][j] = 1+ t[i-1][j-1];
                else
                    t[i][j] = Math.max( t[i-1][j], t[i][j-1]);
            }
        }
        
        return t[m][n];
    }
    
    public static String reverse(String s){
        char str[] = new char[s.length()];
        
        for(int i=0; i<s.length(); i++){
            str[i] = s.charAt(s.length() - 1 - i);
        }
        
        return new String(str);
    }
}
