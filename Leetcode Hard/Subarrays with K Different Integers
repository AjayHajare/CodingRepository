Given an array nums of positive integers, call a (contiguous, not necessarily distinct) subarray of nums good if the number of different integers in that subarray is 
exactly k. (For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3).   Return the number of good subarrays of nums.


Example 1:
Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].

Example 2:
Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].


Constrains:
    1 <= nums.length <= 20000
    1 <= nums[i] <= nums.length
    1 <= k <= nums.length

***********************************************************************************************************************************************************************

//This is a "Variable size sliding window" example. I tried to follow the general format given by Aditya Verma Youtube video, but was getting wrong answer. 
//That format is applicable for "Longest subarray with k different integers". But in this question we need to find "Count of subarrays with K Different Integers".
//Reason is at the end.

***********************************************************************************************************************************************************************

/*
The final ans is calculated by below formula :
number of subarrays with k different integers = (number of subarrays with count of different integers less than equal to k ) - (number of subarrays with count of 
different integers less than equal to k-1 )
*/

class Solution {
    public int subarraysWithKDistinct(int[] A, int K) {
        return atMostK(A, K)-atMostK(A, K-1);
    }

    
    
	private int atMostK(int[] a, int k)                           //This function gives : (number of subarrays with count of different integers less than equal to k)
	{
		int left= 0, right=0, res=0;
		HashMap<Integer, Integer> map= new HashMap<Integer, Integer>();
		while(right<a.length)
		{
			map.put(a[right],map.getOrDefault(a[right],0)+1);
			while(map.size() >k)
			{
				map.put(a[left],map.get(a[left])-1);                   //Slide the window from the left
				if(map.get(a[left])==0) map.remove(a[left]);
				left++;
			}
			res += right-left+1;                                 //(right-left+1) = number of subarrays starting at 'left' & ending at 'right' which contains number of 
                                                           //different integers less than or equal to k
			right++;
		}
		return res;
    
    }
}


Time Complexity: O(N) 
Space Complexity: O(N)

*********************************************************************************************************************************************************************


Aditya verma's approach do not work for this question, becuase in Aditya's approach we find the lengths of subarray with k different integers i.e. window size=(j-i+1).
So, for given window size there is only one 'MAXIMUM' value possible.

But, in this current problem, we need to find count of all possible subarrays with K different integers. So, for given window size there total of (j-i+1) subarray
possible.



