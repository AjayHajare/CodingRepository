You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the 
k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:
Input: nums = [1], k = 1
Output: [1]

Example 3:
Input: nums = [1,-1], k = 1
Output: [1,-1]

Example 4:
Input: nums = [9,11], k = 2
Output: [11]

Example 5:
Input: nums = [4,-2], k = 2
Output: [4]


Constraints:
    1 <= nums.length <= 10^5
    -10^4 <= nums[i] <= 10^4
    1 <= k <= nums.length

********************************************************************************************************************************************************************

// Approach is some modification on  'First negative number from every window of size 'K' from gfg  :------------------------------

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 0 || k == 0) {
             return new int[0];
        }
        
        int size = nums.length - k + 1;     //This is an expression to find size of result array.
        int res[] = new int[size];
        int mx = Integer.MIN_VALUE;
        
        int i=0, j=0;
        
        while(j<nums.length){
            mx = Math.max( nums[j], mx);        //CALCULATION
            
            if(j-i+1 < k)                       //COMMON PART FOR EVERY FIXED SIZE SLIDING WINDOW
                j++;
            
            else if(j-i+1 == k){                //CONDITION FOR CHECKING CURRENT WINDOW SIZE
                res[i] = mx;
                
                if(nums[i] == mx){                          //Befor sliding window(before doing i++), we need to check whether our ith element is current max. 
                                                            //If YES then need to find max from next window and it is done in 'for' loop.                     
                    mx = Integer.MIN_VALUE;                 //This loop runs from 'i+1' to j, which is alomost equal to window size'k'. Hence complexity of 'for' loop 
                    for(int l=i+1; l<=j; l++){              //is O(k). Hence total comoplexity is O(n) * O(k) = O(nk)
                        mx = Math.max( mx, nums[l]);
                    }
                }
                
                i++;
                j++;
            }
        }
        
        return res;
    }
}

//Time Complexity : O(nk),   see explaination above.
//Space Complexity : O(1)

*********************************************************************************************************************************************************************

//Miodification of above apporach to reduce time complexity :----------------------------------

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        Deque<Integer> q = new ArrayDeque<Integer>();
        int[] res = new int[nums.length - k + 1];
        
        int t = 0;
        for(int i = 0; i < nums.length; i++){
        	while(!q.isEmpty() && q.peekLast() < nums[i]){
        		q.pollLast(); // The only change which I did !
        	}
        
            q.addLast(nums[i]);
        	
            if(i > k - 1 && q.peekFirst() == nums[i - k]){
        		q.pollFirst();
        	}
        	
            if(i >= k - 1){
        		res[t++] = q.peekFirst();
        	}	
        }
        return res;
    }
}

//Time Complexity : O(n)  , each number will push in the deque at most once and poll out at most once, so it's o(n)
//Space Complexity : O(k) , in worst we can have k element the deque(Think sequence in accending order0).
