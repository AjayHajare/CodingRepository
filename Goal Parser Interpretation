'StringBuilder' is a class which create modifiable Strings.
        StringBuilder()  = by default creates a String of length '16'
        StringBuilder(int n) = creates a String of length of 'n'
        StringBuilder(String str) =  creates a String which contains value 'str'
   

*********************************************************************************************************************************************************

You own a Goal Parser that can interpret a string command. The command consists of an alphabet of "G", "()" and/or "(al)" in some order. The Goal Parser will 
interpret "G" as the string "G", "()" as the string "o", and "(al)" as the string "al". The interpreted strings are then concatenated in the original order.
Given the string command, return the Goal Parser's interpretation of command.

Example 1:
Input: command = "G()(al)"
Output: "Goal"
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is "Goal".

*******************************************************************************************************************************************************************

class Solution {
    
// 1st solution which is 60% faster    
   
/*  public String interpret(String command) {
        command = command.replace("()", "o");
        command = command.replace("(al)", "al");
        return command;
    }
*/
    
// 2nd solution which is 10% faster
    
    
    public String interpret(String command) {
        
        StringBuilder str = new StringBuilder(command.length());
    
        int i=0;
        while(i<command.length()){
            if(command.charAt(i) == 'G'){
                str.append("G");
                i++;
            }
    
            else if(command.charAt(i)=='(' && command.charAt(i+1)==')'){
                str.append("o");
                i+=2;
            }
    
            else{
                str.append("al");
                i+=4;
            }
        }
        return str.toString();
    }
    
}
