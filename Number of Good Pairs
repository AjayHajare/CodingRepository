Given an array of integers nums.
A pair 
(i,j) is called good if nums[i] == nums[j] and i < j.
Return the number of good pairs.

Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.

Example 2:
Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.

Example 3:
Input: nums = [1,2,3]
Output: 0
 
Constraints:
1 <= nums.length <= 100
1 <= nums[i] <= 100

****************************************************************************************************************************************************

class Solution {

/* Bruteforce approach :

    public int numIdenticalPairs(int[] nums) {
        int count = 0;
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i]==nums[j])
                    count++;
            }
        }
        return count;
    }
*/
    
 // Optimized approach using HaahMap :
 
    public int numIdenticalPairs(int[] nums) {                              
        int count = 0;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for(int x : nums){               
            if(map.containsKey(x)){                         // The 'value' for the hashmap is the frequency of the key encountered so far in the array. If they key is 
                                                            // already present, then 'count' is incremented by the frequency i.e. 'value' of the number seen so far. Now update 
                                                            // the frequency i.e. 'value' of the key by updating the hashmap.


                count += map.get(x);
                map.replace(x, map.get(x)+1);
            }
            else{
                map.put(x, 1);
            }
        }
        
        return count;
    }
}
