You are given an integer array nums and an integer target. You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer 
in nums and then concatenate all the integers. For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the 
expression "+2-1". Return the number of different expressions that you can build, which evaluates to target.

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

Example 2:

Input: nums = [1], target = 1
Output: 1

Constraints:
    1 <= nums.length <= 20
    0 <= nums[i] <= 1000
    0 <= sum(nums[i]) <= 1000
    -1000 <= target <= 1000

***********************************************************************************************************************************************************************

/*
//<----------- RECURSION -------->

class Solution {
    public int findTargetSumWays(int[] nums, int target){
        int n = nums.length;
        return countTargetSum(nums, target, 0, n);
    }
    
    private int countTargetSum(int nums[], int target, int currentSum, int n){
        if(n==0 && target==currentSum){
            return 1; 
        }
        if(n==0){
            return 0;
        }
        
        return countTargetSum(nums, target, currentSum+nums[n-1], n-1) + countTargetSum(nums, target, currentSum-nums[n-1], n-1);
    }
}
*/


// -------------- Memoization --------------------------------------
/* Intuition :-     Suppose we assigned '+' sign to some numbers of array and '-' sign to remaining numbers of array. We made 1 subset(S1) for all '+' numbers and  
                    other subset(S2) for all '-' numbers. 
                          S1 - S2  = target       --------(I)
                    We have a variable 'totalSum' to store sum of all elements of given array. We know S1 and S2 are part of the array.
                          S1 + S2  = totalSum     --------(II)
                    from (I) and (II) 
                          S1 = (target + totalSum) / 2     ----------(in below solution it is refered as 'W')
                    Now problem boils down to "count number of subset of given sum 'S1'"
                    According to constraints, zeros are allowed in the array. 
                    NEED TO TAKE EXTRA CARE FOR BASE CONDITION.


class Solution {
    Integer[][] dp;
    
    int solve(int[] nums, int i, int sum) {
        if(sum == 0 && i==nums.length) return 1;
        if(i >= nums.length || sum < 0) return 0;
        
        if(dp[i][sum] != null) return dp[i][sum];
        
        int ans = solve(nums, i+1, sum - nums[i]) + solve(nums, i+1, sum);
        return dp[i][sum] = ans;
    }

    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for(int num : nums) {
            sum += num;
        }
        
        if((sum  + target) % 2 != 0 || target > sum || target + sum < 0) return 0;
        
        int s = (sum + target)/2;
        dp = new Integer[nums.length][s + 1];
        return solve(nums, 0, s);
    }
}







//<----------- Tabulization Extra work -------->

/*
There are 2 variables that keeps on changing 'index' and 'currentSum'. The range of currentSum is 
    '-sumOfAllElements' --> when all negative values are considered.
    '+sumOfAllElements' --> when all positive values are considered.
Hence number of columns are (2*sumOfAllElements+1), where '1' is added for case when sum becomes zero.

Theory Ecplanation :----------- 
https://leetcode.com/problems/target-sum/solutions/955210/Recursion-to-DP-or-Detailed-explanation-with-code-video-and-diagrams-or-Python

Java Code :---------- 
https://leetcode.com/problems/target-sum/discuss/955210/Recursion-to-DP-or-Detailed-explanation-with-code-video-and-diagrams-or-Python/1108911

*/
class Solution {
    public int findTargetSumWays(int[] nums, int target){
        int max_limit = 0;
        for (int n: nums) {
            max_limit += n;
        }
        
        if (target < -max_limit || target > max_limit) return 0;
        
        int n = nums.length;
        int dp[][] = new int[n+1][2*max_limit+1];
        dp[n][max_limit] = 1;
        
        for (int i=n-1; i >=0; i--) {
            for (int j=-max_limit; j <= max_limit; j++) {
                int centered_j = j + max_limit;
                int positive = centered_j + nums[i];
                int negative = centered_j - nums[i];
                
                if (negative >= 0)
                    dp[i][centered_j] += dp[i+1][negative];
                
                if (positive <= 2*max_limit)
                    dp[i][centered_j] += dp[i+1][positive];
            }
        }
        
        return dp[0][target+max_limit];
    }
    
}
