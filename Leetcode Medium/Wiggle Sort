Given an unsorted array nums, reorder it in-place such that
nums[0] <= nums[1] >= nums[2] <= nums[3]....
Please sort the array in place and do not define additional arrays.

Example 1:
Input: [3, 5, 2, 1, 6, 4]
Output: [1, 6, 2, 5, 3, 4]
Explanation: This question may have multiple answers,[3, 5, 1, 6, 2, 4] and [2, 6, 1, 5, 3, 4] is also ok.

Example 2:
Input: [1, 2, 3, 4]
Output: [1, 4, 2, 3]

***************************************************************************************************************************************************************

Bruteforce Approach :----------
Sort the list. Then copy the first half of sorted list at even positions in same sorted order. Then copy the second half elements from end point to mid point, at odd positions in the sorted order.
                                               
public class Solution {
    public void wiggleSort(int[] nums) {
        int n = nums.length;
        quickSort(nums, 0, n-1);
        
        int res[] = new int[n];

        int index = 0;
        for(int i=0; i<n; i+=2){
            res[i] = nums[index++];
        }

        index = n-1;
        for(int i=1; i<n; i+=2){
            res[i] = nums[index--];
        }

        for(int i=0; i<n; i++){
            nums[i] = res[i];
        }
        
    }

    static void quickSort(int arr[], int beg, int end){
        if(beg<end){
            int loc = partition(arr, beg, end);
            quickSort(arr, beg, loc-1);
            quickSort(arr, loc+1, end);
        }
    }

    static int partition(int arr[], int beg, int end){
        int i=beg, j=end;
        int pivot = arr[beg];
        while(i<j){
            while(arr[i]<=pivot && i<end){
                i++;
            }
            while(arr[j] > pivot && j>beg){
                j--;
            }
            if(i<j){
                swap(arr, i, j);
            }
        }

        swap(arr, j, beg);

        return j;
    }

    static void swap(int arr[], int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

Time complexity : O(nlogn)
Space complexity : O(n)

***************************************************************************************************************************************************************


Optimal Solution :-------- 
Even position element need to be '<=' next element.Odd position element need to be '>=' next element.Whenever above 2 conditions fails, we will swap current 
element with next element. This solution works because, 
Ex- [3, 5, 2, 1, 6, 4]
    The above conditions fails at index '2'. So, after swap array will be like [3, 5, 1, 2, 6, 4]. Now, only 1 swap is able to solve the issue. That is becuase
    arr[1] is already greater than arr[2]. Now arr[2] is again greater than arr[3]. So, automatically arr[1] is greater than arr[3]. Hence just 1 swap solves issue. 


public class Solution {
    public void wiggleSort(int[] nums) {
        for(int i=0; i<nums.length-1; i++){
            if(i%2==0 && nums[i]>nums[i+1]){
                swap(nums, i, i+1);
            }
            else if(i%2==1 && nums[i]<nums[i+1]){
                swap(nums, i, i+1);
            }
        }
    }
    public static void swap(int nums[], int i, int j){
        int temp = nums[i];
        nums[i] = nums[i+1];
        nums[i+1] = temp;
    }
}

Time complexity : O(n)
Space complexity : O(1)
