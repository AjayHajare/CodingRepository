Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting.
Consider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train but we can have arrival time of one 
train equal to departure time of the other. At any given instance of time, same platform can not be used for both departure of a train and arrival of another train. In such cases, 
we need different platforms.


Example 1:

Input: n = 6 
arr[] = {0900, 0940, 0950, 1100, 1500, 1800}
dep[] = {0910, 1200, 1120, 1130, 1900, 2000}
Output: 3
Explanation: 
Minimum 3 platforms are required to 
safely arrive and depart all trains.
Example 2:

Input: n = 3
arr[] = {0900, 1100, 1235}
dep[] = {1000, 1200, 1240}
Output: 1
Explanation: Only 1 platform is required to 
safely manage the arrival and departure 
of all trains. 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findPlatform() which takes the array arr[] (denoting the arrival times), 
array dep[] (denoting the departure times) and the size of the array as inputs and returns the minimum number of platforms required at the railway station such that no train waits.

Note: Time intervals are in the 24-hour format(HHMM) , where the first two characters represent hour (between 00 to 23 ) and the last two characters represent minutes (this may be > 59).


Expected Time Complexity: O(nLogn)
Expected Auxiliary Space: O(n)


Constraints:
1 ≤ n ≤ 50000
0000 ≤ A[i] ≤ D[i] ≤ 2359

********************************************************************************************************************************************************************
/*
IT IS ACTUALLY A WRONG ANSWER. 

  I tried to solve the problem using the treemap. I used because we need to sort the train as per arrival time. Because a train which arrives first, we will assigned with platform.
  But issue is that, I am not considering the departure time of previosly assigned train i.e. I was just compairing 'dep' time of previous with the  'arr' time of current.
  That is why this solution generate wrong ans for some test cases.
*/

class Solution{
    static int findPlatform(int arr[], int dep[], int n){
        TreeMap<Integer, ArrayList<Integer>> tm = new TreeMap<>();
        
        for(int i=0; i<n; i++){
            if(tm.containsKey(arr[i])){
                tm.get(arr[i]).add(i);
            }
            else{
                tm.put(arr[i], new ArrayList<Integer>());
                tm.get(arr[i]).add(i);
            }
        }
        
        ArrayList<Integer> sortedList = new ArrayList<>(tm.keySet());
        //System.out.println("List size = "+ sortedList.size() +" List : "+sortedList);
        
        int len = sortedList.size();
        int count = 1;
        
        for(int i=0; i<len; i++){
            ArrayList<Integer> temp = tm.get(sortedList.get(i));
            for(int index : temp){
                int departure = dep[index];
                for(int j=i+1; j<n; j++){
                    if(dep[j] <= departure){
                        //System.out.print(j +"-"+dep[j]+" ");
                        count++;
                        i = j;
                    }
                    else{
                        break;
                    }
                }
            }
        }
        
        return count;
    }
    
}

********************************************************************************************************************************************************************

/*  
  OPTIMAL SOLUTION :---------------
    This solution is from 'Code library' youtube channel. 
    Arraival time is sorted internally beacause the train which arrive first will be assigned to a platform.
    Departure time is sorted internally beacause the train which arrives next will search for platform which will be vacent first.
    This sorting helps us to find out minimum number of platfroms required.
*/

class Solution{
    static int findPlatform(int arr[], int dep[], int n){
        Arrays.sort(arr);
        Arrays.sort(dep);
        
        int platformCount = 1;                  //we started count with '1', because for atleast 1 train minimum 1 platform is needed.
        int i=1;                                //'i' is the arr[] pointer. The first train is assigned to platform no '1'.
        int j=0;                                //'j' is the dep[] pointer.
        
        while(i<n){
            if(arr[i] <= dep[j]){               //the previous trains are not departing before arrival of new train, hence 'count' is increamented.
                platformCount++;
            }
            else{                               //the previous trains are departing before arrival of new train, hence 'dep[] pointer' is increamented.
                j++;                            //Now the new train can enter this vacent platform. Hence 'count' is not incremented.
            }
            
            i++;                                //'i' is increamented everytime, because everytime a new train arrives.
        }
        
        return platformCount;
    }
}


TC: O(nLogn)
SC: O(1)
