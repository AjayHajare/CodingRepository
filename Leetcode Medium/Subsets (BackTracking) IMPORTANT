Recursion : function calls itself until reaches a base case.

Backtracking : you use recursion in order to explore all the possibilities until you get the best result for the problem.

"Conceptually, you start at the root of a tree; the tree probably has some good leaves and some bad leaves, though it may be that the leaves are all good or all bad. 
You want to get to a good leaf. At each node, beginning with the root, you choose one of its children to move to, and you keep this up until you get to a leaf.

Suppose you get to a bad leaf. You can backtrack to continue the search for a good leaf by revoking your most recent choice, and trying out the next option in that set 
of options. If you run out of options, revoke the choice that got you here, and try another choice at that node. If you end up at the root with no options left, there are 
no good leaves to be found."

Backtracking pattern is   choose --> explore --> unchoose .

Note that -  backtracking will call itself more than once in the body of function, while it's not normally true for recursion

Link -  https://algo.monster/problems/backtracking
*********************************************************************************************************************************************************************************
Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]
 
Constraints:
1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


********************************************************************************************************************************************************************************

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(nums, list, new ArrayList<>(), new boolean[nums.length]);
        return list;
    }
    
    public static void backtrack(int nums[], List<List<Integer>> list, List<Integer> curPermute, boolean used[]){
        if(curPermute.size() == nums.length){
            list.add(new ArrayList<Integer>(curPermute));                                       // make a deep copy since otherwise we'd be append the same list over and over
            return;
        }
        else{
            for(int i=0; i<nums.length; i++){
                if(used[i])                                                                   // if element is used then skip
                    continue;
                curPermute.add(nums[i]);            
                used[i] = true;
                backtrack(nums, list, curPermute, used);                                     // call 'backtrack' function 
                curPermute.remove(curPermute.size() - 1);                                    /* As Backtracking pattern 'choose --> explore --> unchoose', remove recently added
                                                                                                   recently added element from 'current permutation' while backtracking    */
                used[i] = false;                                                             // while backtracking set used value for that removed element as 'false' 
            }             
        }
    }
    
}


Time Complexity  : 
     The recursive function is called 2^n times. Because we have 2 choices at each iteration in nums array. Either we include nums[i] in the current set, or we exclude 
     nums[i]. This array nums is of size n = number of elements in nums.
     We need to create a copy of the current set because we reuse the original one to build all the valid subsets. This copy costs O(n) and it is performed at each call 
     of the recursive function, which is called 2^n times as mentioned in above. So total time complexity is O(n x 2^n).

Space complexity :   
     For recursion: max depth the call stack is going to reach at any time is length of nums, O(n).
     For output:  we're creating 2^n subsets where the average set size is n/2 (for each A[i], half of the subsets will include A[i], half won't) = n/2 * 2^n = O(n * 2^n). 
                  Or in a different way, the total output size is going to be the summation of the binomial coefficients, the total number of r-combinations we can make at 
                  each r size * r elements from 0..n which evaluates to n*2^n. More informally, at size 0, how many empty sets can we make from n elements, then 
                  at size 1 how many subsets of 1 elements can we make from n elements, at size 2, how many subsets of 2 elements can we make ... at size n, etc.So total is 
                  call stack of n + output of n2^n = O(n2^n). If we don't include the output (eg if just asked to print in an interview) then just O(n) of course.


