Find out the maximum sub-array of non negative numbers from an array. The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth 
element and skipping the third element is invalid. Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than 
sub-array B if sum(A) > sum(B).

Example:
A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]

NOTE 1: If there is a tie, then compare with segment's length and return segment which has maximum length.
NOTE 2: If there is still a tie, then return the segment with minimum starting index.


Example 1:
Input:
N = 3
A[] = {1, 2, 3}
Output: 1 2 3
Explanation: In the given array every
element is non-negative.

Example 2:
Input:
N = 2
A[] = {-1, 2}
Output: 2
Explanation: The only subarray [2] is
the answer.

 
Your Task:
Complete the function findSubarray() which takes the array a and the size of the array, n, as input parameters and returns an array representing the answer. 
If there is no subarray return an array of length 1 containing -1 only. You don't to print answer or take inputs.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 10^5
-10^5 ≤ A[i] ≤ 10^5

********************************************************************************************************************************************************************

//Approach used is sliding window approach. This code gives wrong ans. Reason is when current element is negative, I writtern logic that "res = temp". This will make
//'res' to point to 'temp' and whenever temp is updated, it will update the result. It means condition satified first time, then 'res' has correct answer. But then 
//after for every change in 'temp' reflect in 'res' as 'res' is pointing to 'temp' only.

class Solution {
    
    ArrayList<Integer> findSubarray(int a[], int n) {
        long sum=0;
        long resSum=0;
        ArrayList<Integer> res = new ArrayList<Integer>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        
        
        int flag = 0;
        for(int i=0; i<a.length; i++){
            if(a[i] >= 0){
                flag=1;
                break;
            }
        }
        if(flag==0){
            res.add(-1);
            return res;
        }
           
        
        for(int i=0; i<a.length; i++){
            if(a[i] < 0){
                if(resSum<sum){
                    res =temp;
                    resSum = sum;
                }
                sum = 0;
                temp.clear();
            }
            else if( sum+a[i] > a[i] ){
                sum = sum+a[i];
                temp.add(a[i]);
            }
            else{
                sum = a[i];
                temp.add(a[i]);
            }
        }
        
        if(resSum < sum)
            res = temp;
        
        return res;
    }
}

*******************************************************************************************************************************************************************

//Same approach as above, but here instead of "res=temp" instruction, Used separate function 'copyResult()' to copy elements of 'temp' in 'res'. Before copying 
//elements, we need to 'clear()' the 'res' list as previous elements should not be included in 'res' .


class Solution {
    public static void copyResult(List temp, List res){
        res.clear();
        for(int i=0; i<temp.size(); i++)
            res.add(temp.get(i));
    }
    
    ArrayList<Integer> findSubarray(int a[], int n) {
        long sum=0;
        long resSum=0;
        ArrayList<Integer> res = new ArrayList<Integer>();
        ArrayList<Integer> temp = new ArrayList<Integer>();
        
        
        int flag = 0;
        for(int i=0; i<a.length; i++){
            if(a[i] >= 0){
                flag=1;
                break;
            }
        }
        if(flag==0){
            res.add(-1);
            return res;
        }
           
        
        for(int i=0; i<a.length; i++){
            if(a[i] < 0){
                if(resSum<sum){
                    copyResult(temp, res);
                    resSum = sum;
                }
                sum = 0;
                temp.clear();
            }
            else if( sum+a[i] > a[i] ){
                sum = sum+a[i];
                temp.add(a[i]);
            }
            else{
                sum = a[i];
                temp.add(a[i]);
            }
        }
        
        if(resSum < sum)
            copyResult(temp, res);
        
        return res;
    }
}



