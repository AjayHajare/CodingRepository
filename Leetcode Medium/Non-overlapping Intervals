Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals 
non-overlapping.

Example 1:
Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.

Example 2:
Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.

Example 3:
Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 
Constraints:
1 <= intervals.length <= 2 * 104
intervals[i].length == 2
-2 * 104 <= starti < endi <= 2 * 104

**********************************************************************************************************************************************************************************


class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        List<int[]> res = new ArrayList<int[]>();
        
        Arrays.sort( intervals, (a,b)->Integer.compare(a[0],b[0]));
        
        int newInterval[] = intervals[0];
        res.add(newInterval);                                               // Holds reference, so if we update the end of interval, the answer will update as well.
        
        for(int i=0; i<intervals.length; i++){
            if(intervals[i][0] < newInterval[1]){
                newInterval[1] = Math.min( newInterval[1], intervals[i][1]);    //Overlapping intervals, adjust the MIN end , since we want the minimum number of erasures.
            }
            else{
                newInterval = intervals[i];
                res.add(newInterval);
            }
        }
        
        return intervals.length - res.size();
    }
}

Time compleaxity : Arrays.Sort takes  O(nlogn). So the total complexity is O(nlogn)
