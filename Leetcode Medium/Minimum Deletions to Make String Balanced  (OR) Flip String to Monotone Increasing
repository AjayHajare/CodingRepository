Minimum Deletions to Make String Balanced  :--------------------------------

You are given a string s consisting only of characters 'a' and 'b'.
You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.
Return the minimum number of deletions needed to make s balanced.

Example 1:
Input: s = "aababbab"
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 ("aababbab" -> "aaabbb"), or
Delete the characters at 0-indexed positions 3 and 6 ("aababbab" -> "aabbbb").

Example 2:
Input: s = "bbaaaaabb"
Output: 2
Explanation: The only solution is to delete the first two characters.

Constraints:
    1 <= s.length <= 105
    s[i] is 'a' or 'b'.

**********************************************************************************************************************************************************************

class Solution {
    public int minimumDeletions(String s) {
        int res = 0;
        int bcount = 0;
        
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) == 'a'){
                res = Math.min(res+1, bcount);              
                                                                                  //if (res + 1) is minimum then remove the current 'a'
                                                                                  //if (bcount) is minimun, then keep current 'a' (must remove all previous 'b's)
            }
            else{
                bcount++;
            }
        }
            
        return res;
    }
}

*******************************************************************************************************************************************************************

Flip String to Monotone Increasing  :----------------------------------------


A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)
We are given a string s of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.
Return the minimum number of flips to make s monotone increasing.

Example 1:
Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.

Example 2:
Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.

Example 3:
Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.

Note:
    1 <= s.length <= 20000
    s only consists of '0' and '1' characters.

******************************************************************************************************************************************************************

//Approach similar to "minimum deletion to make string balanced"  :-------------------------

class Solution {
    public int minFlipsMonoIncr(String s) {
        int res = 0;
        int count1 = 0;
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) == '0'){
                res = Math.min(res+1, count1);
                            //if (res+1) is minimum then we will flip current '0'
                            //if (count1) is minimum then we will flip all previous '1'
            }
            else{
                count1++;
            }
        }
        return res;
    }
}


******************************************************************************************************************************************************************

//Greedy Approach :--------------------

/*
starting from left, if we have seen more zeroes than ones ( if(flipCount > onesCount) ), it would be more economical to flip ones so far into zeroes, keep a 
count of flipped bits (flipCount = onesCount;) and move on. Note from this point on it's a subproblem of reduced scale hence we can apply the greedy approach
*/

class Solution {
    public int minFlipsMonoIncr(String s) {
        int flipCount = 0;
        int onesCount = 0;
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) == '0'){
                if(onesCount == 0)      continue;
                else                    flipCount++;
            }
            else{
                onesCount++;
            }
            if(onesCount < flipCount)
                flipCount = onesCount;
        }
        return flipCount;
    }
}
