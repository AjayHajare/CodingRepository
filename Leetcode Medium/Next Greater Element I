You are given two integer arrays nums1 and nums2 both of unique elements, where nums1 is a subset of nums2.
Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, return -1 for this number.

Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation:
For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
For number 1 in the first array, the next greater number for it in the second array is 3.
For number 2 in the first array, there is no next greater number for it in the second array, so output -1.

Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation:
For number 2 in the first array, the next greater number for it in the second array is 3.
For number 4 in the first array, there is no next greater number for it in the second array, so output -1.
 
Constraints:
1 <= nums1.length <= nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 104
All integers in nums1 and nums2 are unique.
All the integers of nums1 also appear in nums2.

*******************************************************************************************************************************************************************************


//Bruteforce Approach   :---------------------------------------------------------

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;
        
        int result[] = new int[len1];
        
        for(int i=0; i<len1; i++){
            result[i] = -1;
        }
        
        for(int i=0; i<len1; i++){
            int index = i;
            for(int j=0; j<len2; j++){                                 //For each element in nums1 array, searched for its corresponding positions in nums2 array 
                if(nums1[i] == nums2[j]){
                    index = j;
                    break;
                }
            }
            
            for(int j=index; j<len2; j++){                            //For each element in nums1 array, with help of 'index' that we get in previous loop, we searched
                if(nums1[i] < nums2[j]){                              //for greater element to the right of 'index'
                    result[i] = nums2[j];
                    break;
                }
                                                                                                    
            }
        }
        
        return result;
    }
}


Time Complexity : There are two for loop. Outer for loop traverse through each element of nums1 array. Inner for loop traverse through each element of nums2 array. 
                  Hence complexity is O(n^2)
Space Complexity : O(1)

*****************************************************************************************************************************************************************************

//Better Approach :-----------------------------------------

Key observation:
Suppose we have a decreasing sequence followed by a greater number.
For example [5, 4, 3, 2, 1, 6] then the greater number 6 is the next greater element for all previous numbers in the sequence

We use a stack to keep a decreasing sub-sequence, whenever we see a number x greater than stack.peek() we pop all elements less than x and for all the popped ones, their next 
greater element is x. For example [9, 8, 7, 3, 2, 1, 6]. The stack will first contain [9, 8, 7, 3, 2, 1] and then we see 6 which is greater than 1 so we pop 1 2 3 whose next 
greater element should be 6.




class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int result[] = new int[nums1.length];
        
        Stack<Integer> stk = new Stack<Integer>();
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
              
        for(int j=0; j<nums2.length; j++){
           while(!stk.isEmpty() && stk.peek()< nums2[j])
               map.put(stk.pop(), nums2[j]);
            
            stk.push(nums2[j]);
        }
            
        for(int i=0; i<nums1.length; i++){                       //For each element in nums1 array, check whether it is present in hashmap. If present, store its mapped value.
            if(map.containsKey(nums1[i])){                       //If not present, then store '-1' in the result.
                result[i] = map.get(nums1[i]);
            }
            else
                result[i] = -1;
        }
                
        return result;
    }
}

Time Complexity : At first it seems it is O(n^2), becuase of nested loop. But it is wrong.
                  For each element, there is one push operation, that is O(n). And since not all elements have pop operations, if the nums is in descending order, there 
                  is 0 pop operation, and if the nums is in ascending order, there are n-1 pop operations. So the total operation number ranges from O(n+0) to O(n+n-1), 
                  that is O(n).

Space Complexity: stack and Hashmap need O(2n) i.e. O(n)





