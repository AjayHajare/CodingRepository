Given an integer num, return an array of the number of 1's in the binary representation of every number in the range [0, num].

Example 1:
Input: num = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10

Example 2:
Input: num = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 
Constraints:
0 <= num <= 105

***************************************************************************************************************************************************************************

//In first Approach, for each number in range i to num, counted number of '1' in binary representation and then added the count in result:


class Solution {
    public int[] countBits(int num) {
        int res[] = new int[num+1];
                
        for(int i=0; i<=num; i++){
            int n = i, count = 0;
            while(n>0){
                if(n%2 == 1)
                    count++;
                n=n/2;
            }
            res[i] = count;
        }
                
        return res;
    }
}

Time Complexity :  it has two loops, one loop is inside the other loop. So, complexity is O(n^2)

*****************************************************************************************************************************************************************************

//In second approach, the basic intuition is every binary representation of 'n' has same number of 1's as 'n/2'. For example: 6 = 0110  and 3 = 0011.
//After applying the method above, 7/2 = 3 and 3 has 2 x 1's. But number 7 has 3 x 1's. So, we need a modulus function '%' to check if the number is even or odd. 
//if the number is even, then '0' is added. Else if the number is odd, then '1' is added. 

class Solution {
    public int[] countBits(int num) {
        int res[] = new int[num+1];
                
        for(int i=0; i<=num; i++){
            res[i] = res[i/2] + i%2;
        }
                
        return res;
    }
}

Time Complexity :  It has one loop only. So, complexity is O(n).

*******************************************************************************************************************************************************************************

//Third approach is same as second approach. Only 'division' is replaced with  'right shift(>>)' and  'modulus(%)' is replaced with 'Bitwise AND (&)'. 

class Solution {
    public int[] countBits(int num) {
        int res[] = new int[num+1];
                
        for(int i=0; i<=num; i++){
            res[i] = res[i>>2] + i&1;
        }
                
        return res;
    }
}

Time Complexity :  It has one loop only. So, complexity is O(n).
