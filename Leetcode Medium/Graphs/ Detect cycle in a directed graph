Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:
4 4
0 1
1 2
2 3
3 3
Output: 1
Explanation: 3 -> 3 is a cycle


Example 2:

Input:
3 2
0 1
1 2
Output: 0
Explanation: no cycle in the graph


Your task:
You don’t need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and 
adjacency list as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.

Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)

Constraints:
1 ≤ V, E ≤ 10^5

************************************************************************************************************************************************************************

//This code is based on DFS algorithm. This is different from what we used in 'cycle detection in undirected graph'. Because for node with two incoming nodes and zero
//outgoing nodes, the 'DFS of undirected graph' will reach that node twice and then will declare the graph as cyclic. This is wrong. Hence we need to modify it to 
//make it work on directed graph.


class Solution 
{
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj)
    {
        int vis[] = new int[V];                                             //Here we defined two array, vis[] is used to keep track of visited nodes of graph
        int dfsvis[] = new int[V];                                          //dfsvis[] array is used to keep track of visited node during current DFS loop.
        for(int i=0; i<V; i++){
            if(vis[i] == 0){
                if(checkCycleDFS(i, vis, dfsvis, adj) == true)
                    return true;
            }
        }
        
        return false;
    }
    
    public static boolean checkCycleDFS(int node, int vis[], int dfsvis[], ArrayList<ArrayList<Integer>> adj){
        vis[node] = 1;
        dfsvis[node] = 1;
        
        for(int x:adj.get(node)){
            if(vis[x] == 0){
                if(checkCycleDFS(x, vis, dfsvis, adj)==true)
                    return true;
            }
            else if(vis[x] == 1 && dfsvis[x] == 1){
                return true;
            }
        }
        
        dfsvis[node] = 0;                                                 //After completing the DFS, we need to make the dfsvis[] value for that perticular node to '0', as its work is done for current DFS cycle.
        return false;
    }
}


Time complexity :  O(V+E) 
Space complexity :  O(V)+ O(V) + O(V+E) + O(V) ........O(V) for vis[],  O(V) for dfsvis[], O(V+E) for adjecancy list, O(V) for recursive calls

************************************************************************************************************************************************************************

//This solution is based on Kahn's algorithm which is used for topological sort using BFS. Same logic is used here. 
//As we know the topological sort is applied to only DAG. If the topo sort will contain all nodes of graph, then it means that there is no cycle in graph.
//Otherwise there is a cycle in the graph.



class Solution 
{
    //Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj)
    {
        int indegree[] = new int[V];
        
        for(int i=0; i<V; i++){
            for(int x: adj.get(i)){
                indegree[x]++;
            }
        }
        return new Solution().detectCycleBFS(0, indegree, adj);
    }
    
    public boolean detectCycleBFS(int vertex, int indegree[], ArrayList<ArrayList<Integer>> adj){
        Queue<Integer> q = new LinkedList<Integer>();
        
        for(int i=0; i<indegree.length; i++){                       //Add all nodes in the queue which have indegree '0'
            if(indegree[i]==0)
                q.add(i);
        }
        
        int count = 0;
        while( !q.isEmpty() ){
            int node = q.poll();
            count++;                                             //Here instead of creating array to store the topo sort, we just used count to calculate number of element in topo sort
            for(int x: adj.get(node)){
                indegree[x]--;                                   //When we traverse from a node to its adjacent node, then indegree of adjacent node need to be decreased. Beacuase the incoming edge can be discarded now as we have traversed it     
                
                if(indegree[x]==0)                               //indegree is '0' means all its pre-dependencies are covered and we can include that in our topo sort.
                    q.add(x);
            }
        }
        
        if( count == indegree.length)
            return false;
        
        return true;
    }
}


Time complexity :  O(V+E) 
Space complexity :  O(V)+ O(V) + O(V+E) ........O(V) for indegree[],  O(V) for queue, O(V+E) for adjecancy list
