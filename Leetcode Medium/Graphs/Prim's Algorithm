Given a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

 

Example 1:

Input:
3 3
0 1 5
1 2 3
0 2 1
Output:
4
Explanation:
0 to 2, wt = 1
1 to 2, wt = 3
total cost = 4
The Spanning Tree resulting in a weight of 4 is shown above.

Example 2:

Input:
2 1
0 1 5
Output:
5
Explanation:
0 to 1, wt = 5
total cost = 5
Only one Spanning Tree is possible which has a weight of 5.

 

Your task:
Since this is a functional problem you don't have to worry about input, you just have to complete the function  spanningTree() which takes number of vertices V 
and an adjacency matrix adj as input parameters and returns an integer denoting the sum of weights of the edges of the Minimum Spanning Tree. Here adj[i] 
contains a list of lists containing two integers where the first integer j denotes that there is an edge between i and j and second integer w denotes that the 
distance between edge i and j is w.
 

Expected Time Complexity: O(ElogV).
Expected Auxiliary Space: O(V2).
 

Constraints:
2 ≤ V ≤ 1000
V-1 ≤ E ≤ (V*(V-1))/2
1 ≤ w ≤ 1000
Graph is connected and doesn't contain self loops & multiple edges.

******************************************************************************************************************************************************************

class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        int visited[] = new int[V];
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();
        int cost = 0;
        
        pq.add(new Pair(0, 0));
        
        while(!pq.isEmpty()){
            Pair p = pq.remove();
            
            if(visited[p.getV()]==0){
                visited[p.getV()]=1;
                cost += p.getWt();
                
                for(ArrayList<Integer> l :  adj.get(p.getV()) ){
                    if(visited[l.get(0)]==0)
                        pq.add( new Pair(l.get(0), l.get(1)) );
                }
            }
        }
        
        return cost;
    }
    
    static class Pair implements Comparable<Pair>{
        int v;
        int wt;
        
        Pair(int _v, int _wt){
            this.v = _v;
            this.wt = _wt;
        }
        
        int getV(){
            return this.v;
        }
        
        int getWt(){
            return this.wt;
        }
        
        public int compareTo(Pair o){
            return this.wt - o.wt;
        }
    }
}


Time complexity : O(v + ElogV) .......(V+E) for traveling all vertices and edges of graph. And for every edge, the priority queue is taking 'logV' to maintain ascending order. Hence multipled 'E' by 'logV'.
                                     Priority queue takes 'logV', becuase it is implemented using Heap. And inserting in priority queue is same as build heap. Hence it takes 'logV' complexity.
Space complexity : O(V) + O(V) ....... O(V) for visited array,  O(V) for priority queue
