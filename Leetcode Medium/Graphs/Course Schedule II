There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] 
indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all 
courses, return an empty array.

 
Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after 
you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]
 

Constraints:
    1 <= numCourses <= 2000
    0 <= prerequisites.length <= numCourses * (numCourses - 1)
    prerequisites[i].length == 2
    0 <= ai, bi < numCourses
    ai != bi
    All the pairs [ai, bi] are distinct.


****************************************************************************************************************************************************************


//This question is application of both Cycle detection and topological sort. I used DFS in the solution.
//In the following solution in single DFS function, I wrote code for Cycle detection and topological sort.
//The ordering of courses is returned only when there is no cycle.
//The ordering of courses is the topological ordering.

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        if(prerequisites.length == 0){
            int res[] = new int[numCourses];
            for(int i=0; i<numCourses; i++){
                res[i] = i;
            }
            return res;
        }
        
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();
        
        for(int i=0; i<numCourses; i++){
            adj.add( new ArrayList<Integer>() );
        }
        for(int i=0; i<prerequisites.length; i++){
            int u = prerequisites[i][1];
            int v = prerequisites[i][0];
            
            adj.get(u).add(v);
        }
        
        int vis[] = new int[numCourses];
        int dfsvis[] = new int[numCourses];
        Stack<Integer> stk = new Stack<Integer>();
        
        
        for(int i=0; i<numCourses; i++){
            if(vis[i]==0){
                if(detectCycleDFS(i, vis, dfsvis, adj, stk) == true )
                    return new int[0];
            }
        }
        
        int res[] = new int[numCourses];
        int index = 0;
        while(!stk.isEmpty()){
            res[index++] = stk.pop();
        }
        
        
        return res;
    }
    
    public boolean detectCycleDFS(int node, int vis[], int dfsvis[], ArrayList<ArrayList<Integer>> adj, Stack<Integer> stk){
        vis[node] = 1;
        dfsvis[node] = 1;                                           //This dfsvis[] is used to keep track of node visited during current call of dfs function.
        
        for(int nbr : adj.get(node)){
            if(vis[nbr]==0){
                if( detectCycleDFS(nbr, vis, dfsvis, adj, stk) == true )        //If any of the function call detect cycle and return true then all the parent function call will carry the 'true' value.
                    return true;
            }
            else if(vis[nbr]==1 && dfsvis[nbr]==1){                         //This is main condition to detect cycle. if node is already visited and it is visited during current dfs call, then it means there is a cycle.
                return true;
            }
        }
        
        stk.push(node);                             //This stack maintain topological order of nodes.
        dfsvis[node] = 0;                          //Before returning from dfs call, the current node's 'dfsvis[]' is set to '0'
        
        return false;                              //At the end, if no cycle is detected return false.
    }
}


//Time complexity : O(V+E)
//Space complexity : O(V+E) + O(V) .......O(V+E) for adj list,  O(V) for vis[], dfsvis[], stack etc.
