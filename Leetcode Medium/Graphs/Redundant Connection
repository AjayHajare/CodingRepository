In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen 
from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an 
edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.


Example 1:

Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:

Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]


Constraints:
    n == edges.length
    3 <= n <= 1000
    edges[i].length == 2
    1 <= ai < bi <= edges.length
    ai != bi
    There are no repeated edges.
    The given graph is connected.

******************************************************************************************************************************************************************


//The approach is based on Union Rank (Disjoint set) algo. This algorithm is also used in Kruskal's

class Solution {
    int parent[];
    int height[];
    public int[] findRedundantConnection(int[][] edges) {
        int res[] = new int[2];
        parent = new int[edges.length+1];
        height = new int[edges.length+1];
        
        for(int i=1; i<edges.length+1;i++){
            parent[i] = i;
        }
        
        for(int i=0; i<edges.length;i++){
            if(findParent(edges[i][0]) != findParent(edges[i][1])){             //If parent of two nodes, is different then they belong to different component. 
                union(edges[i][0], edges[i][1]);                                //If they belong to different component, union then in single component.
            }
            else{                                                               //If parent of two nodes, is same then they belong to same component. so, this edge forms a cycle in graph. Hence we will not include the edge in MST.
                res[0] = edges[i][0];
                res[1] = edges[i][1];
            }
        }
        
        return res;
    }
    
    
    
    int findParent(int u){                       //These two blocks are from  "Disjoint Set Algo"
        if(parent[u] == u)
            return u;
        
        return parent[u] = findParent(parent[u]);
    }
    
    
    
    void union(int u, int v){                          
        int parentU = findParent(u);                    //Find parent of u and v
        int parentV = findParent(v);
        
        if(height[parentU] < height[parentV])           
            parent[parentU] = parentV;              //If height of 'parentU' is less, then attach parentU to parentV i.e. "parent value of u" is equal "parent of v"
        
        else if(height[parentU] > height[parentV])      
            parent[parentV] = parentU;              //If height of 'parentV' is less, then attach parentV to parentU i.e. "parent value of v" is equal "parent of u"
        
        else{
            parent[parentV] = parentU;              //If height of both is equal, then any node can attach to other node. Here we attach parentU to parentV i.e. "parent value of u" is equal "parent of v"
            height[parentU]++;                      //Also increase the 'rank' of 'height' for the parent node as one more level is got added in the union tree.
        }
    }
}



Time complexity : O(ElogV)
Space complexity : O(2V)
