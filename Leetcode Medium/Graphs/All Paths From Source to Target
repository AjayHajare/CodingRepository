Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Example 2:

Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

Example 3:

Input: graph = [[1],[]]
Output: [[0,1]]

Example 4:

Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]

Example 5:

Input: graph = [[1,3],[2],[3],[]]
Output: [[0,1,2,3],[0,3]]

 

Constraints:

    n == graph.length
    2 <= n <= 15
    0 <= graph[i][j] < n
    graph[i][j] != i (i.e., there will be no self-loops).
    The input graph is guaranteed to be a DAG.

******************************************************************************************************************************************************************

//This solution is simple dfs based solution. During traversal using dfs we will keep tract of node that are visited. If we reach the end //node, then we will add that path in the result list of list;

class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> res = new ArrayList();                    //ArrayList<ArrayList<Integer>> gives 'cannot instatitiate error'
        ArrayList<Integer> path = new ArrayList<Integer>();
        
        path.add(0);                                                  //The source is available in every path
                
        dfs(0, graph, path, res);                                     //The DAG is strongly connected graph, hence no for loop is required while making the dfs call.
        
        return res;
    }
    
    public void dfs(int node, int graph[][], ArrayList<Integer> path, List<List<Integer>> res){
        if(node==graph.length-1){                                    //The node is the target node, then add current path in result. 
            res.add(new ArrayList<Integer>(path));
        }
        
        for(int nbr : graph[node]){                                 //make a dfs call for each neighbour of current node.                                           
            path.add(nbr);                                          //first add neighbour vertex in the path and then call the dfs and before returning remove this neighbour's entry from path. 
            dfs(nbr, graph, path, res);
            path.remove(path.size()-1);                             //list.remove(int index) :  this function need vertex. Hence list.remove(nbr) will not work and gives 'outofbound' error
        }
    }
}


//Time complexity : O(V+E) ......as dfs algo is used directly.
//Space complexity : O(V) ......as in worst case 'path' list can have all the vertices.
