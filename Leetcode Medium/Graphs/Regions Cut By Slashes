An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous 
regions. Given the grid grid represented as a string array, return the number of regions.
Note that backslash characters are escaped, so a '\' is represented as '\\'.

Example 1:

Input: grid = [" /","/ "]
Output: 2

Example 2:

Input: grid = [" /","  "]
Output: 1

Example 3:

Input: grid = ["\\/","/\\"]
Output: 4
Explanation: (Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.)

Example 4:

Input: grid = ["/\\","\\/"]
Output: 5
Explanation: (Recall that because \ characters are escaped, "\\/" refers to \/, and "/\\" refers to /\.)

Example 5:

Input: grid = ["//","/ "]
Output: 3


Constraints:
    n == grid.length
    n == grid[i].length
    1 <= n <= 30
    grid[i][j] is either '/', '\', or ' '
    
 ****************************************************************************************************************************************************************
 
 
//At first we increse the size of (nxn) matrix to (3n x 3n) matrix.

class Solution {
    public int regionsBySlashes(String[] grid) {
        int n = grid.length;
        
        int matrix[][] = new int[n*3][n*3];                                                     //Define matrix of size 3n x 3n
        
        for(int i=0; i<n; ++i){
            for(int j=0; j<n; ++j){                                                           //Fill the apppropriate blocks of matrix for each char of given strings
                if(grid[i].charAt(j)=='/'){
                    matrix[i*3][j*3+2] = matrix[i*3+1][j*3+1] = matrix[i*3+2][j*3] = 1;             
                }
                else if(grid[i].charAt(j)=='\\'){
                    matrix[i*3][j*3] = matrix[i*3+1][j*3+1] = matrix[i*3+2][j*3+2] = 1;        
                }    
            }
            
        }
        
        int regions = 0;
        
        for(int i=0; i<3*n; ++i){
            for(int j=0; j<3*n; ++j){
                regions += dfs(matrix, i, j) > 0 ? 1 : 0;                                //if dfs returns value greater '0', it means there is new region, hence add it to count of regions.
            }
        }
        
        return regions;
    }
    
    public int dfs(int matrix[][], int i, int j){
        if(i<0 || j<0 || i>=matrix.length || j>=matrix[0].length || matrix[i][j] != 0){                     
            return 0;                                                                             //if 'i' or 'j' is out of bound of matrix then return 'o'
        }                                                                                         //if current block of matrix is not equal to '0' means it is occupied, then return '0'
        matrix[i][j] = 1;                                                                         //if the block is not occupied then assign value '1'
        return 1 + dfs(matrix, i-1, j) + dfs(matrix, i+1, j) + dfs(matrix, i, j-1) + dfs(matrix, i, j+1) ;       //from the current block expand in all four direction.
    }
}


//Time complexity  : O(n^2)
//Space complexity : O(n^2)
