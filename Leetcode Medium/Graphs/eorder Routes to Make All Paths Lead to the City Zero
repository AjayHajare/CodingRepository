There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). 
Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow. Roads are represented by connections where 
connections[i] = [ai, bi] represents a road from city ai to city bi.This year, there will be a big event in the capital (city 0), and many people want to travel 
to this city. Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach city 0 after reorder.

Example 1:

Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).

Example 2:

Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).

Example 3:

Input: n = 3, connections = [[1,0],[2,0]]
Output: 0

Constraints:

    2 <= n <= 5 * 10^4
    connections.length == n - 1
    connections[i].length == 2
    0 <= ai, bi <= n - 1
    ai != bi

*******************************************************************************************************************************************************************

/*
The solution can be formed using BFS as well as DFS. Here I used BFS.
Based on the problem description, we have a tree, and node zero is the root.
However, the direction can point either from a parent to a child (positive), or from a child to its parent (negative). To solve the problem, we traverse the tree and count edges that are directed from a parent to a child. Direction of those edges need to be changed to arrive at zero node.
*/


class Solution {
    public int minReorder(int n, int[][] connections) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();        //The graph is given in terms of edges only. So we converted it to adjacency list format.
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<Integer>());
        }
        for(int nbr[] : connections){                                       
            adj.get(nbr[0]).add(nbr[1]);                     //while constructing 'adj' list, we add positive edge for given direction
            adj.get(nbr[1]).add(-nbr[0]);                   //while constructing 'adj' list, we add negative edge for opposite of given direction
        }
        
        int visited[] = new int[n];
        
        int res = bfs(0, adj, visited);                   //Here, we did not used the for loop for calling bfs, becuase condition is "each city can reach city 0 after reorder". This indicates that the graph is connected only. There are no multiple components.
        
        return res;
    }   
    
    public int bfs(int src, ArrayList<ArrayList<Integer>> adj, int visited[]){
        int res = 0;                                                                //'res' is used to store number of edges to be changed
        
        Queue<Integer> q = new LinkedList<Integer>();
        
        q.add(src);                                       //Given src is added to queue. In this case, it is '0'
        visited[src] = 1;
        
        while(!q.isEmpty()){
            int vertex = q.remove();
            for(int nbr : adj.get(vertex)){
                if(visited[Math.abs(nbr)]==0){
                    if(nbr > 0)                           //This block is BFS. while traversing when edge is parent to child i.e. edge is positive, then we need to change the direction of that edge. Hence we increament the res.
                        res++;
                    q.add(Math.abs(nbr));
                    visited[Math.abs(nbr)] = 1;
                }
            }
        }
        
        return res;
    }
    
}


//Time Complexity: O(n). We visit each node once.
//Space Complexity: O(n). We store n nodes in the adjacency list, with n - 1 edges in total.

******************************************************************************************************************************************************************



/*
The solution can be formed using BFS as well as DFS. Here I used DFS.
Based on the problem description, we have a tree, and node zero is the root.
However, the direction can point either from a parent to a child (positive), or from a child to its parent (negative). To solve the problem, we traverse the tree and count edges that are directed from a parent to a child. Direction of those edges need to be changed to arrive at zero node.
*/


int dfs(List<List<Integer>> al, boolean[] visited, int from) {
    int change = 0;
    visited[from] = true;
    for (var to : al.get(from))
        if (!visited[Math.abs(to)])
            change += dfs(al, visited, Math.abs(to)) + (to > 0 ? 1 : 0);
    return change;   
}
public int minReorder(int n, int[][] connections) {
    List<List<Integer>> al = new ArrayList<>();
    for(int i = 0; i < n; ++i) 
        al.add(new ArrayList<>());
    for (var c : connections) {
        al.get(c[0]).add(c[1]);
        al.get(c[1]).add(-c[0]);
    }
    return dfs(al, new boolean[n], 0);
}

//Time Complexity: O(n). We visit each node once.
//Space Complexity: O(n). We store n nodes in the adjacency list, with n - 1 edges in total.


