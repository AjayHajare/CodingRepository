Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, Find the number of strongly connected components in the graph.
 

Example 1:

Input:
5 5
1 0
0 2
2 1
0 3
3 4
Output:
3
Explanation:
We can clearly see that there are 3 Strongly Connected Components in the Graph.


Your Task:
You don't need to read input or print anything. Your task is to complete the function kosaraju() which takes the number of vertices V and adjacency list of the 
graph as inputs and returns an integer denoting the number of strongly connected components in the given graph.
 

Expected Time Complexity: O(V+E).
Expected Auxiliary Space: O(V).
 

Constraints:
1 ≤ V ≤ 5000
0 ≤ E ≤ (V*(V-1))
0 ≤ u, v ≤ N-1
Sum of E over all testcases will not exceed 25*10^6

******************************************************************************************************************************************************************


class Solution
{
    Stack<Integer> stk = new Stack<Integer>();                                //This global stack is used to store the topological sort of given graph.
    
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {   
        int visited[] = new int[V];
        for(int i=0; i<V; i++){                                                 //This for loop will ensure that all the components of graph are visited
            if(visited[i]==0)
                topoSortDFS(i, adj, visited);                                   //First apply topological sort to get dependencies of nodes
        }
        
        ArrayList<ArrayList<Integer>> transposeAdj = transposeGraph(V, adj);        //Create a transpose graph 
        Arrays.fill(visited, 0);                                                    //Make visited array to all zeros again, so that we can start with DFS travsal for stack element
        int count = 0;                                                              //This 'count' is to calculate strongly connectd component
        
        while(!stk.isEmpty()){                                                  //Now we will pop each element from stack and will apply topoSort with transpose graph
            int x = stk.pop();
            if(visited[x]==0){
                topoSortDFS(x, transposeAdj, visited);
                count++;
            }
        }
        
        return count;
    }
    
    public void topoSortDFS(int node, ArrayList<ArrayList<Integer>> adj, int visited[]){
        visited[node] = 1;
        for(int nbr : adj.get(node)){
            if(visited[nbr] == 0){
                topoSortDFS(nbr, adj, visited);
            }
        }
        stk.push(node);    
    }
    
    public ArrayList<ArrayList<Integer>> transposeGraph(int V, ArrayList<ArrayList<Integer>> adj){
        ArrayList<ArrayList<Integer>> transposeAdj =  new  ArrayList<ArrayList<Integer>>();
        
        for(int i=0; i<V; i++){
            transposeAdj.add(new ArrayList<Integer>());
        }
        
        for(int i=0; i<V; i++){
            ArrayList<Integer> l = adj.get(i);
            for(int j=0; j<l.size(); j++){
                int v = l.get(j);
                transposeAdj.get(v).add(i);
            }
        }
        
        return transposeAdj;
    }
}

Time Complexity : O(V+E) ........as it is using just DFS
Space Compelxity : O(V)
