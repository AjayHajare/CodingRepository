For a general weighted graph, we can calculate single source shortest distances in O(VE) time using Bellman–Ford Algorithm. 
For a graph with no negative weights, we can do better and calculate single source shortest distances in O(E + VLogV) time using Dijkstra’s algorithm. 
Can we do even better for Directed Acyclic Graph (DAG)? We can calculate single source shortest distances in O(V+E) time for DAGs by using Topological Sorting.

*******************************************************************************************************************************************************************

//In this program the node graph is represented as ArrayList of ArrayList. The inner ArrayList is consist of 'Pair'. Each 'Pair' represed (destination, weight).
//for Edge from '1' to '2' with weight '8' :----------  '1' index of ArrayList will consist of pair (2, 8)
//for Edge from '1' to '3' with weight '9' :----------  In same graph, same '1' index of ArrayList will consist of pair (3, 9)


import java.util.*; 

class Pair{
    private int v;
    private int weight;
    Pair(int _v, int _w) { 
        v = _v; 
        weight = _w; 
    }
    int getV() { return v; }
    int getWeight() { return weight; }
}

class ShortestPathInDAG{

    public void shortestPath(int src, ArrayList<ArrayList<Pair>> adj, int n){
        Stack<Integer> stk = new Stack<Integer>();
        int visited[] = new int[n];

        for(int i=0; i<n; i++){
            if(visited[i]==0)
                topoDFS(i, visited, adj, stk);
        }

        int dist[] = new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        while(!stk.isEmpty()){                                                      //This is the stack of topological order
            int node = (int)stk.pop();
            for(Pair p : adj.get(node)){
                if( dist[node] + p.getWeight()  < dist[p.getV()] ){                 //This is relaxation equation of this algorithm
                    dist[p.getV()] = dist[node] + p.getWeight();
                }

            }
        }

        for(int x : dist){
            if(x==Integer.MAX_VALUE)
                System.out.print("INF ");
            else 
                System.out.print(x + " ");
        }
    }

    public static void topoDFS(int node, int visited[], ArrayList<ArrayList<Pair>> adj, Stack<Integer> stk){       //This method gives topological sort using DFS algo.       
        visited[node] = 1;                                                                                        
        for(Pair p : adj.get(node)){
            if(visited[p.getV()]==0)
                topoDFS(p.getV(), visited, adj, stk);
        }
        stk.push(node);                                                                                           //The topological order is stored in stack
    }

    public static void main(String args[]){
        int n = 6;
        ArrayList<ArrayList<Pair> > adj = new ArrayList<ArrayList<Pair> >();
		
		for (int i = 0; i < n; i++) 
			adj.add(new ArrayList<Pair>());
			
		adj.get(0).add(new Pair(1, 2));
		adj.get(0).add(new Pair(4, 1));
		adj.get(1).add(new Pair(2, 3));
		adj.get(2).add(new Pair(3, 6));
		adj.get(4).add(new Pair(2, 2));
		adj.get(4).add(new Pair(5, 4));
		adj.get(5).add(new Pair(3, 1));
		ShortestPathInDAG obj = new ShortestPathInDAG(); 
		obj.shortestPath(0, adj, n); 
		
    }
}


Time complexity : O(E+V)
Space complexity : O(v) + O(v) + O(v) ...........for stack and visisted array and dist array

