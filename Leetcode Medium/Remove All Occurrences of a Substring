Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:
Find the leftmost occurrence of the substring part and remove it from s.
Return s after removing all occurrences of part.
A substring is a contiguous sequence of characters in a string.
 

Example 1:

Input: s = "daabcbaabcbc", part = "abc"
Output: "dab"
Explanation: The following operations are done:
- s = "daabcbaabcbc", remove "abc" starting at index 2, so s = "dabaabcbc".
- s = "dabaabcbc", remove "abc" starting at index 4, so s = "dababc".
- s = "dababc", remove "abc" starting at index 3, so s = "dab".
Now s has no occurrences of "abc".

Example 2:

Input: s = "axxxxyyyyb", part = "xy"
Output: "ab"
Explanation: The following operations are done:
- s = "axxxxyyyyb", remove "xy" starting at index 4 so s = "axxxyyyb".
- s = "axxxyyyb", remove "xy" starting at index 3 so s = "axxyyb".
- s = "axxyyb", remove "xy" starting at index 2 so s = "axyb".
- s = "axyb", remove "xy" starting at index 1 so s = "ab".
Now s has no occurrences of "xy".

 

Constraints:
    1 <= s.length <= 1000
    1 <= part.length <= 1000
    s and part consists of lowercase English letters.

***********************************************************************************************************************************************************************

//This is the sliding window appoach. 

class Solution {
    public String removeOccurrences(String s, String part) {
        int plen = part.length();                                       //part length will be same throghout the program, hence we can define a variable for it
        int i=0, j=0;
        
        while(j<s.length()){                                           //s length will change everytime we delete part from s, hence we can not define variable for it
                                                                       //In the first try I tried by defining variable for 's length', but it gave wrong.
                                                                       //This took 1 hour to figure out.
            if(j-i+1 < plen)
                j++;
            else if(j-i+1 == plen){
                if( s.substring(i, j+1).equals(part) ){
                    s = s.substring(0,i) + s.substring(j+1, s.length());                //When window string matches to part, then we will update s will characters 
                                                                                        //before window and after window.
                    j=0;                                                                
                    i=0;                                                                //After updating s, process should start again from beginning.
                }
                else{
                    j++;                                                                //Else window string does not match to part, maintain windwo size and slide it
                    i++;
                }
            }
        }
        
        return s;
    }
}

Time complexity :  Worst case is when 's' and 'part' are same, then complexity will be O(n^2).
                   Otherwise average case O(n).
Space complexity : O(1)
