Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

Example 1:

Input: nums = [1,2,3]
Output: 6
Example 2:

Input: nums = [1,2,3,4]
Output: 24
Example 3:

Input: nums = [-1,-2,-3]
Output: -6
 

Constraints:

3 <= nums.length <= 104
-1000 <= nums[i] <= 1000

**********************************************************************************************************************************************************************

/*
It is the bruteforce solution. First we will find of all combinations of which will contain 3 elements of array. 
Simultaneous we will calculate value of their product. When selection of 3 elements is completed, then compare the product value with the 'max' value which 
we define as global.

NOTE : This global varible is static. Hence the initialization of variable need to be done in the function call. Because if we initialize it globally, the 'max'
       value of previous test case will be stored in 'max' variable. Hence with each new test case, the value of 'max' need to be initialize.
       

Time Complexity : O(n^n)  
*

class Solution {
    static int max;
        
    public int maximumProduct(int[] nums) {
        max = Integer.MIN_VALUE;
        allCombinations(nums, -1, 1, 0);
        
        return max;
    }
    
    static void allCombinations(int nums[], int lastPos, int asf, int isf){
        if(isf==3){
            if(max < asf)
                max = asf;
            return;
        }
        for(int i=lastPos+1; i<nums.length; i++){
            allCombinations(nums, i, asf*nums[i], isf+1);
        }
    }
}
*/

/*
There are four cases:
all positive - product of last three
all negative - product of last three
one negative - product of last three
two or more negative - either (product of first two and last) or (product of last three)

So, in general there are only two cases :
    1) product of first two and last 
    2) product of last three
    
This idea is implemented in the below program.

Time Complexity : O(n^n) 
*/

class Solution {
    public int maximumProduct(int[] nums) {
        int n = nums.length;
        
        int firstMax = Integer.MIN_VALUE;
        int secondMax = Integer.MIN_VALUE;
        int thirdMax = Integer.MIN_VALUE;
        
        int firstMin = Integer.MAX_VALUE;
        int secondMin = Integer.MAX_VALUE;
        
        
        for(int i=0; i<n; i++){
            if(nums[i] > firstMax){
                thirdMax = secondMax;
                secondMax = firstMax;
                firstMax = nums[i];
            }
            else if(nums[i] > secondMax){
                thirdMax = secondMax;
                secondMax = nums[i];
            }
            else if(nums[i] > thirdMax){
                thirdMax = nums[i];
            }
            
            if(nums[i] < firstMin){
                secondMin = firstMin;
                firstMin = nums[i];
            }
            else if(nums[i] < secondMin){
                secondMin = nums[i];
            }
        }
        
        
        return Math.max( (firstMax * secondMax * thirdMax), (firstMin * secondMin * firstMax) );
    }
}
