Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum 
to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique 
if the frequency of at least one of the chosen numbers is different. It is guaranteed that the number of unique combinations that sum up to target is less than 
150 combinations for the given input.


Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Example 4:
Input: candidates = [1], target = 1
Output: [[1]]

Example 5:
Input: candidates = [1], target = 2
Output: [[1,1]]
 

Constraints:
1 <= candidates.length <= 30
1 <= candidates[i] <= 200
All elements of candidates are distinct.
1 <= target <= 500

******************************************************************************************************************************************************************


//It is a backtracking algorithm.

class Solution {   
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        solveCombinationSum(res, candidates, target, new ArrayList<Integer>(), 0, 0);
        return res;
    }
    
    public static void solveCombinationSum(List<List<Integer>> res, int candidates[], int target, ArrayList<Integer> tempAns, int idx, int currentSum){
        if(currentSum==target ){
            
            res.add(new ArrayList<Integer>(tempAns));  
            /*  As java passes varible by reference. if you directly add templist, what you actually add is the address of templist. In the                 following calculation, templist will continue change, so the content in the address will change. But if you add a new                       ArrayList, it won't change anymore.
            */
                         
            return;
        }
            
        if(idx==candidates.length || currentSum>target){
            return;
        }
        
        for(int i = idx; i<candidates.length; i++){
            tempAns.add(candidates[i]);
            solveCombinationSum(res, candidates, target, tempAns, i, currentSum+candidates[i]);
            tempAns.remove(tempAns.size()-1);
        }
    }
}


/*
TC:  O(N^target) where N is a length of candidates array.
SC:  O(target).

This is worst case and without any optimization, like moving position forward. Just assuming that each recursive step we go over all existing candidates, so base N. And go as deep as target in our recursive calls (if candidates are close to 1), so power of target.
*/
