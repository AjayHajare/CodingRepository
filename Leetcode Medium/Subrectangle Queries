Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:
1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)
Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).

2. getValue(int row, int col)
Returns the current value of the coordinate (row,col) from the rectangle.
 

Example 1:
Input:
["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue","getValue"]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
Output:
[null,1,null,5,5,null,10,5]
Explanation:
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  
// The initial rectangle (4x3) looks like:
// 1 2 1
// 4 3 4
// 3 2 1
// 1 1 1
subrectangleQueries.getValue(0, 2); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);
// After this update the rectangle looks like:
// 5 5 5
// 5 5 5
// 5 5 5
// 5 5 5 
subrectangleQueries.getValue(0, 2); // return 5
subrectangleQueries.getValue(3, 1); // return 5
subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);
// After this update the rectangle looks like:
// 5   5   5
// 5   5   5
// 5   5   5
// 10  10  10 
subrectangleQueries.getValue(3, 1); // return '10'
subrectangleQueries.getValue(0, 2); // return '5'

Constraints:
There will be at most 500 operations considering both methods: updateSubrectangle and getValue.
1 <= rows, cols <= 100
rows == rectangle.length
cols == rectangle[i].length
0 <= row1 <= row2 < rows
0 <= col1 <= col2 < cols
1 <= newValue, rectangle[i][j] <= 10^9
0 <= row < rows
0 <= col < cols

*****************************************************************************************************************************************************************************


/**
 * Your SubrectangleQueries object will be instantiated and called as such:
 * SubrectangleQueries obj = new SubrectangleQueries(rectangle);
 * obj.updateSubrectangle(row1,col1,row2,col2,newValue);
 * int param_2 = obj.getValue(row,col);
 */

//Created HashMap to hold the array with 'kay' as 'Row Major Order' index and 'value' as actual ele of array.

class SubrectangleQueries{
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    int columns;
    
    public SubrectangleQueries(int[][] rectangle) {
        columns = rectangle[0].length;
            
        for(int i=0; i<rectangle.length; i++){
            for(int j=0; j<rectangle[0].length; j++){
                map.put(i*columns+j, rectangle[i][j]);
            }
        }
    }
    
    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {
        for(int i=row1; i<=row2; i++){
            for(int j=col1; j<=col2; j++){
                map.put(i*columns+j, newValue);
            }
        }
    }
    
    public int getValue(int row, int col) {
        return map.get(row*columns+col);
    }
}

Time complexity :  O(mn)
Space complexity :  O(mn)


********************************************************************************************************************************************************************

// In this approach, a 2-D matrix is created to hold the given array and a linked list is created to hold the update requests.
// This approach does not update the given matrix, it just uses linked list to store the updated value;

class SubrectangleQueries{
    LinkedList<int[] > list = new LinkedList<int []>();
    int r[][];
    
    public SubrectangleQueries(int[][] rectangle) {
        r = new int[rectangle.length][rectangle[0].length];
        
        for(int i=0; i<rectangle.length; i++){
            for(int j=0; j<rectangle[0].length; j++){
                r[i][j] = rectangle[i][j];
            }
        }
    }
    
    public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) {
        list.push(new int[]{row1, col1, row2, col2, newValue});
    }
    
    public int getValue(int row, int col) {
        for(int[] x : list ){                                                      // Iterate through each element of list
            if(row>=x[0] && row<=x[2] && col>=x[1] && col<=x[3])                   // Check the if condition for input parameters 'row' & 'col'
                return x[4];
        }
        
        return r[row][col];
    }
}




