Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.
A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the 
border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.

Example 2:
Input: board = [["X"]]
Output: [["X"]]
 
Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.

*******************************************************************************************************************************************************************

/* Let's analyze when an 'O' cannot be flipped,
      // if it has atleast one 'O' in it's adjacent, AND ultimately this chain of adjacent 'O's is connected to some 'O' which lies on boundary of board
        
      //consider these two cases for clarity :
        O's won't be flipped          O's will be flipped
        [X O X X X]                   [X X X X X]     
        [X O O O X]                   [X O O O X]
        [X O X X X]                   [X O X X X] 
        [X X X X X]                   [X X X X X]
      
      So we can conclude if a chain of adjacent O's is connected some O on boundary then they cannot be flipped
        
      //Steps to Solve :
      //1. Move over the boundary of board, and find O's 
      //2. Every time we find an O, perform DFS from it's position
      //3. In DFS convert all 'O' to '#'      (why?? so that we can differentiate which 'O' can be flipped and which cannot be)   
      //4. After all DFSs have been performed, board contains three elements,#,O and X
      //5. 'O' are left over elements which are not connected to any boundary O, so flip them to 'X'
      //6. '#' are elements which cannot be flipped to 'X', so flip them back to 'O'
*/

class Solution {
    public void solve(char[][] board) {
        int r=board.length, c=board[0].length;
        
        int i, j;
        
        for(i=0; i<r; i++){                     //Step 1 & Step 2
            if(board[i][0]=='O'){
                dfs(board, i, 0);
            }
            if(board[i][c-1]=='O'){
                dfs(board, i, c-1);
            }
        }
        
        for(j=0; j<c; j++){                     //Step 1 & Step 2
            if(board[0][j]=='O'){
                dfs(board, 0, j);
            }
            if(board[r-1][j]=='O'){
                dfs(board, r-1, j);
            }
        }
        
        for(i=0; i<r; i++){                     //Step 5
            for(j=0; j<c; j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        
        for(i=0; i<r; i++){                     //Step 6
            for(j=0; j<c; j++){
                if(board[i][j]=='#'){
                    board[i][j]='O';
                }
            }
        }
    }
    
    public static void dfs(char board[][], int i, int j){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]=='X'){
            return;
        }
        
        if(board[i][j]=='O'){                           //Step 3 & Step 4
            board[i][j]='#';
        
            dfs(board, i-1, j);
            dfs(board, i+1, j);
            dfs(board, i, j-1);
            dfs(board, i, j+1);
        }
    }
}

//Time complexity :  O(No of rows(m) * No of cols(n))' this many dfs() calls can be made in worst case. dfs() required time O(1). Hence total complexity  = O(mn)

//Space complexit : O(1)
                     
