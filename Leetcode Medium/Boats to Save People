You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. 
Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

Example 1:
Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)

Example 2:
Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)

Example 3:
Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)
 
Constraints:
1 <= people.length <= 5 * 10^4
1 <= people[i] <= limit <= 3 * 10^4

********************************************************************************************************************************************************************

//Better solution :
   First I tried this question to solve using HashMap. Beacuse I thought the question is similar to "3 sum problem". But after seeing solution from youtube realized that it will not work. 
   In this solution, we will use Two Pointer Apporach. It first sort given array. Sorting insures that the we can combine smallest from left end and largest from right end to form a pair. 
   And if there sum is greater than 'limit', then we decrease the sum by selecting slightly smaller value from right end i.e. we will decreament the right pointer.
   
   TC : O(nlogn)
   SC : O(1)


class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);
        
        int boats = 0;
        int left = 0, right = people.length-1;
        
        while(left <= right){
            if(people[left] + people[right] <= limit){
                boats++;
                left++;
                right--;
            }
            else{
                boats++;
                right--;
            }
        }
        
        return boats;
    }
}

*****************************************************************************************************************************************************************
//Optimal Solution :
More optimal solution can be formed based on given constraints. Instead of inbuilt sort, we can use 'Count Sort' as max value of an array element is '3*10^4'.
   TC : O(n)
   SC : O(limit)

class Solution {
    public int numRescueBoats(int[] people, int limit) {
        int count[] = countSort(people, limit);
        
        int idx = 0;
        for(int val=0; val<=limit; val++){
            while(count[val] > 0){
                people[idx++] = val;
                count[val]--;
            }
        }
        
        int boats = 0;
        int left = 0, right = people.length-1;
        
        while(left <= right){
            if(people[left] + people[right] <= limit){
                boats++;
                left++;
                right--;
            }
            else{
                boats++;
                right--;
            }
        }
        
        return boats;
    }
    
    public static int[] countSort(int people[], int limit){
        int count[] = new int[limit + 1];
        
        for(int i=0; i<people.length; i++){
            count[ people[i] ]++;
        }
        
        return count;
    }
}
