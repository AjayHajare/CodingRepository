You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one 
quantity of each item. In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. 
Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than 
or equal to W. You cannot break an item, either pick the complete item, or don’t pick it (0-1 property).

Example 1:
Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3

Example 2:
Input:
N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0

Your Task:
Complete the function knapSack() which takes maximum capacity W, weight array wt[], value array val[] and number of items n as a parameter and returns the maximum 
possible value you can get.

Expected Time Complexity: O(N*W).
Expected Auxiliary Space: O(N*W)

Constraints:
1 ≤ N ≤ 1000
1 ≤ W ≤ 1000
1 ≤ wt[i] ≤ 1000
1 ≤ v[i] ≤ 1000


**********************************************************************************************************************************************************************


//Recurssive Solution :-------
class Solution{
    static int knapSack(int W, int wt[], int val[], int n){
        if(n==0 || W==0)
            return 0;
        if(wt[n-1] <= W)
            return Math.max( (val[n-1] + knapSack(W-wt[n-1], wt, val, n-1)), 
                             knapSack(W, wt, val, n-1) );
        return knapSack(W, wt, val, n-1);
    }
}

*********************************************************************************************************************************************************************

//Memoization Solution :-----
class Solution { 
    static  int dp[][] = new int[1001][1001];

    static int  knapSacks(int W, int wt[], int val[], int n){
    if(W==0||n==0)
        return 0;
    if(dp[n][W]!=-1)
        return dp[n][W];
    if(wt[n-1]>W)
        return dp[n][W]=knapSacks(W,wt,val,n-1);
    return dp[n][W]=Math.max( val[n-1]+knapSacks(W-wt[n-1],wt,val,n-1), knapSacks(W,wt,val,n-1));

}
    
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    {   
        for(int i=0; i<dp.length; i++){
            for(int j=0; j<dp[0].length; j++)
                dp[i][j]= -1;
        }
         return knapSacks(W,wt,val,n);
    } 
}

*********************************************************************************************************************************************************************


// Bottom Up DP Solution :-------
class Solution{
    static int knapSack(int W, int wt[], int val[], int n){
        int t[][] = new int[n+1][W +1];
           
        for(int i=1; i<n+1; i++){
            for(int j=1; j<W+1; j++){
                if(wt[i-1] <= j){
                    t[i][j] = Math.max( val[i-1] + t[i-1][j - wt[i-1]], t[i-1][j]);
                }
                else
                    t[i][j] = t[i-1][j];
            }
        }
        
        return t[n][W];
    }
}
