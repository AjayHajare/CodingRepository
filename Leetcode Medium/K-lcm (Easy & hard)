It is the easy version of the problem. The only difference is that in this version k=3.

You are given a positive integer n. Find k positive integers a1,a2,…,ak, such that:
a1+a2+.....+ak=n
LCM(a1,a2,....,ak)≤n/2
Here LCM is the least common multiple of numbers a1,a2,…,ak.
We can show that for given constraints the answer always exists.

Input
The first line contains a single integer t (1≤t≤104)  — the number of test cases.
The only line of each test case contains two integers n, k (3≤n≤109, k=3).

Output
For each test case print k positive integers a1,a2,…,ak, for which all conditions are satisfied.

Example :
Input :
3
3 3
8 3
14 3

Output :
1 1 1
4 2 2
2 6 6

*****************************************************************************************************************************************************************

Brute force Approach :
We can first find all the combination of '3' numbers which sum up to 'n'. For all these combinations, we need to find the LCM, the combination  which satifies the 
second condition is the answer.

*****************************************************************************************************************************************************************

Optimal Approach : 
The main section to think about is the second condition- " LCM(a1,a2,....,ak)≤n/2 ". Here we want the LCM to be less than equal to "n/2". 
In the sequence of 3 numbers, the LCM is "greatest number" OR "multiple of greatest number". And we want this "greatest number" <= n/2. So, our candidate answer 
lies in sequence which has numbers in range 1 to n/2.

Any number, when taken '%2' falls in following two category :
1) Odd number :  eg.  n=7  -> n/2, n/2, 1  -> 3, 3, 1
                      n=19 -> n/2, n/2, 1  -> 9, 9, 1
                 All odd number can be dealt with this approach.
                 
2) Even number : For an even number, divide by 2 will gives two equal parts. But we want 3 parts.
                 If 'n' is even and 'n/2' is also even,, then we can divide on part of 'n/2' further in to 'n/4' + 'n/4'
                 eg.  n=20 -> n/2, n/2  ->  n/2, n/4, n/4  ->  10, 5, 5
                      n=40 -> n/2, n/2  ->  n/2, n/4, n/4  ->  20, 10, 10
                      
                 If 'n' is even and 'n/2' is odd, then we can divide '(n-1)/2' & '(n-1)/2' & '2'
                 eg.  n=30 ->  (n-1)/2, (n-1)/2, 2  ->  14, 14, 2
                      n=50 ->  (n-1)/2, (n-1)/2, 2  ->  24, 24, 2
                      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import java.util.*;

public class Klcm{
    public static void main(String args[]){
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        
        while(t>0){
            int n = scan.nextInt();
            int k = scan.nextInt();
            
            if(n%2==1){
                System.out.println(n/2 +" "+ n/2 +" "+ "1");
            }
            else{
                if(n%4==0){
                    System.out.println(n/2 +" "+ n/4 +" "+ n/4);
                }
                else{
                    System.out.println((n-1)/2 +" "+(n-1)/2 +" "+ "2");
                }
            }
            t--;
        }
    }
}

Time complexity : O(1)
Space complexity : O(1)

*****************************************************************************************************************************************************************

It is the hard version of the problem. The only difference is that in this version 3≤k≤n.

You are given a positive integer n. Find k positive integers a1,a2,…,ak, such that:
a1+a2+.....+ak=n
LCM(a1,a2,....,ak)≤n/2
Here LCM is the least common multiple of numbers a1,a2,…,ak.
We can show that for given constraints the answer always exists.

Input
The first line contains a single integer t (1≤t≤104)  — the number of test cases.
The only line of each test case contains two integers n, k (3≤n≤109, 3≤k≤n).
It is guaranteed that the sum of k over all test cases does not exceed 105.

Output
For each test case print k positive integers a1,a2,…,ak, for which all conditions are satisfied.

Example
Input :
2
6 4
9 5

Output :
1 2 2 1 
1 3 3 1 1 


*****************************************************************************************************************************************************************

Optimal Approach : 
In this version of question, the value of 'k' is not fixed to '3' i.e. 3≤k≤n
Now, we will convert this version of question to the above easy version. As, we not '1' does not affect the LCM but it is effective to get sum equal to 'n'.
For given k, we will take  'k-3' elements as '1' in answer. So, now the actual k = 3.
For given n, we will take 'n-(k-3)', as the amount 'k-3' is covered by all the ONES that we added already.

So, now the problem becomes,  n = n-(k-3)  & k=3.
Now we use about solution to get the complete answer.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import java.util.*;
 
public class Klcm{
    public static void main(String args[]){
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        
        while(t>0){
            int n = scan.nextInt();
            int k = scan.nextInt();
            
            ArrayList<Integer> res = new ArrayList<Integer>();
            
            for(int i=0; i<k-3; i++){
                res.add(1);
            }
            
            n = n - (k-3);
            k = 3;
            
            if(n%2==1){
                res.add(n/2);
                res.add(n/2);
                res.add(1);
            }
            else{
                if(n%4==0){
                    res.add(n/2);
                    res.add(n/4);
                    res.add(n/4);
                }
                else{
                    res.add((n-1)/2);
                    res.add((n-1)/2);
                    res.add(2);
                }
            }
            
            for(int x:res){
                System.out.print(x + " ");    
            }
            
            System.out.println();
            
            t--;
        }
    }
}


Time complexity : O(1)
Space complexity : O(N), as we used extra ArrayList to store the answer.
