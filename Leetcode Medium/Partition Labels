A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, 
and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:
S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.

**************************************************************************************************************************************************************************

//It is a two Pointer solution. First traverse the String and record the last position for each character. Then define two pointers 'start' & 'end'. 
//For each character in String, check whether the current position is the last position for corresponding character. If 'yes' then check whether this is 'end' position. 
//If 'yes' then calculate the length of substring as 'end-start+1' and update the start & end pointer.

class Solution {
    public List<Integer> partitionLabels(String S) {
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        List<Integer> res = new ArrayList<Integer>();
                
        for(int i=0; i<S.length(); i++){
            map.put( S.charAt(i), i);
        }
        
        int start = 0; 
        int end = 0;
        
        for(int i=0; i<S.length(); i++){    
            end = Math.max( map.get(S.charAt(i)), end );
            if(end == i){
                res.add(end - start + 1);
                start = end + 1;
            }
        }
        
        return res;
    }
}
