Given a string s, find the longest palindromic subsequence's length in s.
A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: s = "bbbab"
Output: 4
Explanation: One possible longest palindromic subsequence is "bbbb".

Example 2:
Input: s = "cbbd"
Output: 2
Explanation: One possible longest palindromic subsequence is "bb".

Constraints:
    1 <= s.length <= 1000
    s consists only of lowercase English letters.

*********************************************************************************************************************************************************************

// This solution is based on Longest common subsequence(LCS). The two input strings for LCS are  'given string' and  'reverse of given string'. For reversing a string
// a function is defined.


class Solution {
    public int longestPalindromeSubseq(String s) {
        String rev = reverse(s);
        int m = s.length(), n = rev.length();
        int t[][] = new int[m+1][n+1];
        
        for(int i=1; i<m+1; i++){
            for(int j=1; j<n+1; j++){
                if(s.charAt(i-1) == rev.charAt(j-1))
                    t[i][j] = 1 + t[i-1][j-1];
                else
                    t[i][j] = Math.max( t[i-1][j],  t[i][j-1] );
            }
        }
        
        return t[m][n];
    }
    
    public static String reverse(String s){
        int len = s.length();
        char cArray[] = new char[len];
        
        for(int i=0; i<len; i++){
            cArray[i] = s.charAt(len-1-i);
        }
        
        String rev = new String(cArray);
        return rev;
    }
}


Time complexity : O(n^2)
Space complexity : O(n^2)
